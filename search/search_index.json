{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Sipi is a multihreaded, high-performance, IIIF compatible media server developed by the Data and Service Center for the Humanities at the University of Basel . It is designed to be used by archives, libraries, and other institutions that need to preserve high-quality images while making them available online. Sipi implements the International Image Interoperability Framework ( IIIF ), and efficiently converts between image formats, preserving metadata contained in image files. In particular, if images are stored in JPEG 2000 format, Sipi can convert them on the fly to formats that are commonly used on the Internet. Sipi offers a flexible framework for specifying authentication and authorization logic in Lua scripts, and supports restricted access to images, either by reducing image dimensions or by adding watermarks. It can easily be integrated with Knora . In addition SIPI preserves most of the EXIF , IPTC and XMP metadata and can preserve or transform ICC colour profiles. In addition, a simple webserver is integrated. The server is able to serve most common file types. In addition Lua scripts and embedded Lua (i.e., Lua embedded into HTML pages using the tags <lua>\u2026</lua> are supported. Sipi can also be used from the command line to convert images to/from TIFF-, JPEG 2000 , JPEG- and PNG- formats. For all these conversion, Sipi tries to preserve all embedded metadata such as - IPTC - EXIF - XMP - ICC color profiles. However, due to the limitations of some file formats, it cannot be guaranteed that all metadata and ICC profiles are preserved. - JPEG2000 (J2k) does not allow all types of ICC profiles profiles. Unsupported profile types will be added to the J2k header as comment and will be reinstated if the J2k file is converted back to the TIFF-format. Sipi is free software , released under the GNU Affero General Public License . It is written in C++ and runs on Linux and Mac OS X. Note: In order to compile SIPI, the user has to provide a licensed source of the kakadu software . Freely distributable binary releases are available daschswiss/sipi as docker image.","title":"Overview"},{"location":"#overview","text":"Sipi is a multihreaded, high-performance, IIIF compatible media server developed by the Data and Service Center for the Humanities at the University of Basel . It is designed to be used by archives, libraries, and other institutions that need to preserve high-quality images while making them available online. Sipi implements the International Image Interoperability Framework ( IIIF ), and efficiently converts between image formats, preserving metadata contained in image files. In particular, if images are stored in JPEG 2000 format, Sipi can convert them on the fly to formats that are commonly used on the Internet. Sipi offers a flexible framework for specifying authentication and authorization logic in Lua scripts, and supports restricted access to images, either by reducing image dimensions or by adding watermarks. It can easily be integrated with Knora . In addition SIPI preserves most of the EXIF , IPTC and XMP metadata and can preserve or transform ICC colour profiles. In addition, a simple webserver is integrated. The server is able to serve most common file types. In addition Lua scripts and embedded Lua (i.e., Lua embedded into HTML pages using the tags <lua>\u2026</lua> are supported. Sipi can also be used from the command line to convert images to/from TIFF-, JPEG 2000 , JPEG- and PNG- formats. For all these conversion, Sipi tries to preserve all embedded metadata such as - IPTC - EXIF - XMP - ICC color profiles. However, due to the limitations of some file formats, it cannot be guaranteed that all metadata and ICC profiles are preserved. - JPEG2000 (J2k) does not allow all types of ICC profiles profiles. Unsupported profile types will be added to the J2k header as comment and will be reinstated if the J2k file is converted back to the TIFF-format. Sipi is free software , released under the GNU Affero General Public License . It is written in C++ and runs on Linux and Mac OS X. Note: In order to compile SIPI, the user has to provide a licensed source of the kakadu software . Freely distributable binary releases are available daschswiss/sipi as docker image.","title":"Overview"},{"location":"building/","text":"Building Sipi from Source Code Prerequisites To build Sipi from source code, you must have Kakadu , a JPEG 2000 development toolkit that is not provided with Sipi and must be licensed separately. The Kakadu source code archive v8_0_5-01727L.zip must be placed in the vendor subdirectory of the source tree before building Sipi. Sipi's build process requires CMake (minimal Version 3.0.0), a C++ compiler that supports the C++11 standard (such as GCC or clang ), and several libraries that are readily available on supported platforms. The test framework requires Python 3 , (version 3.5 or later), Apache ab (which is assumed to be installed by default on macOS Sierra), nginx , and a recent version of ImageMagick . Instructions for installing these prerequisites are given below. The build process downloads and builds Sipi's other prerequisites. Sipi uses the Adobe ICC Color profiles, which are automatically downloaded by the build process into the file icc.zip . The user is responsible for reading and agreeing with Adobe's license conditions, which are specified in the file Color Profile EULA.pdf . docker We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/ If you must build sipi, the preferred way is to build it inside a docker image. Docker must be installed on the system. Then, in the top directory of the source tree, do make compile will download and compile SIPI within a docker container `make test to run the full test suite make run to run SIPI in docker image macOS You will need Homebrew and at least OSX 10.11.5. Prerequisites for building Sipi without its automated test framework: xcode-select --install brew install cmake brew install doxygen brew install openssl brew install libmagic brew install gettext brew install libidn If you also want to run Sipi's tests: brew install nginx sudo chown -R $USER /usr/local/var/log/nginx/ brew install imagemagick --with-openjpeg brew install python3 pip3 install Sphinx pip3 install pytest pip3 install requests pip3 install psutil pip3 install iiif_validator Ubuntu 18.04 Prerequisites for building Sipi without its automated test framework: sudo apt-get install g++-7 sudo apt-get install cmake sudo apt-get install libssl-dev sudo apt-get install doxygen sudo apt-get install libreadline-dev sudo apt-get install gettext sudo apt-get install libmagic-dev sudo apt-get install unzip sudo apt-get install libidn11-dev If you also want to run Sipi's tests, you will need ImageMagick , version 7.0.6 or higher. We suggest compiling it from source: sudo apt-get install libtiff5-dev libjpeg-turbo8-dev libopenjp2-7-dev wget https://github.com/ImageMagick/ImageMagick/archive/7.0.6-0.tar.gz tar -xzf 7.0.6-0.tar.gz cd ImageMagick-7.0.6-0/ ./configure make sudo make install sudo ldconfig /usr/local/lib Then: sudo apt-get install ab sudo apt-get install nginx sudo chown -R $USER /var/log/nginx sudo apt-get install python3 sudo apt-get install python3-pip sudo -H pip3 install --upgrade pip sudo -H pip3 install Sphinx sudo -H pip3 install pytest sudo -H pip3 install requests sudo -H pip3 install psutil sudo -H pip3 install iiif_validator Debian 8 First, follow the instructions for ubuntu-build. Then, CMake has to be patched. Unfortunaltely the version of CMake provided by the Debian packages contains a bug and cannot find the OpenSSL libraries and includes. To apply the patch, go to the Sipi dicrectory and run: sudo ./debian-cmake-patch.sh CentOS 7 This requires GCC version 5.3 or greater. You can install it by installing devtoolset-4 , and adding this to your .bash_profile : source scl_source enable devtoolset-4 Prerequisites for building Sipi without its automated test framework: sudo yum -y install cmake3 sudo yum -y install readline-devel sudo yum -y install doxygen sudo yum -y install patch sudo yum -y install openssl-devel sudo yum -y install gettext sudo yum -y install file-devel If you also want to run Sipi's tests, you will need ImageMagick , version 7.0.6 or higher. We suggest compiling it from source: sudo yum install libtiff-devel libjpeg-turbo-devel openjpeg2-devel wget https://github.com/ImageMagick/ImageMagick/archive/7.0.6-0.tar.gz tar -xzf 7.0.6-0.tar.gz cd ImageMagick-7.0.6-0/ ./configure make sudo make install sudo ldconfig /usr/local/lib Then: sudo yum -y install httpd-tools sudo yum -y install nginx sudo chown -R $USER /var/log/nginx sudo chown -R $USER /var/lib/nginx sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm sudo yum -y install python35u sudo yum -y install python35u-devel sudo yum -y install python35u-pip sudo pip3.5 install Sphinx sudo pip3.5 install pytest sudo pip3.5 install requests sudo pip3.5 install psutil sudo pip3.5 install iiif_validator Docker We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/ Compiling the Source Code Start in the build subdirectory of the source tree: cd build Then compile Sipi: cmake .. make By default, Sipi is built without optimization and with debug information output. To compile Sipi with optimization level 3, run: cmake .. -DMAKE_DEBUG:BOOL=OFF make Running Tests You can run the automated tests in the build directory like this: make test // will run all tests (minimum output) ctest --verbose // will run all tests (detailed output) make check // will run only e2e tests (detailed output) Making a Directory Tree for Installing Sipi In build , type this to install Sipi in the local subdirectory of the source tree: make install You can then copy the contents of local to the desired location. Generating Documentation To generate this manual in HTML format, cd to the manual subdirectory of the source tree and type: make html You will then find the manual under manual/_build/html . To generate developer documentation about Sipi's C++ internals, cd to the build directory and type: make doc You will find the developer documentation in HTML format under doc/html . To generate developer documentation in PDF format, first ensure that you have LaTeX installed. Then cd to doc/html/latex and type make . Starting Over To delete the previous build and start over from scratch, cd to the top level of the source tree and type: rm -rf build/* lib local extsrcs include/*_icc.h Building inside Docker All that was described before, can also be done by using docker. All commands need to be executed from inside the source directory (and not build the build directory). Also, Docker needs to be installed on the system. // deletes cached image and needs only to be used when newer image is available on dockerhub docker image rm --force dhlabbasel/sipi-base:18.04 // building docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. && make\" // building and running all tests docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. && make && ctest --verbose\" // make html documentation docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/manual; make html\" Since we mount the current source directory into the docker container, all build artifacts can be accessed as if the build would have been performed without docker.","title":"Building"},{"location":"building/#building-sipi-from-source-code","text":"","title":"Building Sipi from Source Code"},{"location":"building/#prerequisites","text":"To build Sipi from source code, you must have Kakadu , a JPEG 2000 development toolkit that is not provided with Sipi and must be licensed separately. The Kakadu source code archive v8_0_5-01727L.zip must be placed in the vendor subdirectory of the source tree before building Sipi. Sipi's build process requires CMake (minimal Version 3.0.0), a C++ compiler that supports the C++11 standard (such as GCC or clang ), and several libraries that are readily available on supported platforms. The test framework requires Python 3 , (version 3.5 or later), Apache ab (which is assumed to be installed by default on macOS Sierra), nginx , and a recent version of ImageMagick . Instructions for installing these prerequisites are given below. The build process downloads and builds Sipi's other prerequisites. Sipi uses the Adobe ICC Color profiles, which are automatically downloaded by the build process into the file icc.zip . The user is responsible for reading and agreeing with Adobe's license conditions, which are specified in the file Color Profile EULA.pdf .","title":"Prerequisites"},{"location":"building/#docker","text":"We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/ If you must build sipi, the preferred way is to build it inside a docker image. Docker must be installed on the system. Then, in the top directory of the source tree, do make compile will download and compile SIPI within a docker container `make test to run the full test suite make run to run SIPI in docker image","title":"docker"},{"location":"building/#macos","text":"You will need Homebrew and at least OSX 10.11.5. Prerequisites for building Sipi without its automated test framework: xcode-select --install brew install cmake brew install doxygen brew install openssl brew install libmagic brew install gettext brew install libidn If you also want to run Sipi's tests: brew install nginx sudo chown -R $USER /usr/local/var/log/nginx/ brew install imagemagick --with-openjpeg brew install python3 pip3 install Sphinx pip3 install pytest pip3 install requests pip3 install psutil pip3 install iiif_validator","title":"macOS"},{"location":"building/#ubuntu-1804","text":"Prerequisites for building Sipi without its automated test framework: sudo apt-get install g++-7 sudo apt-get install cmake sudo apt-get install libssl-dev sudo apt-get install doxygen sudo apt-get install libreadline-dev sudo apt-get install gettext sudo apt-get install libmagic-dev sudo apt-get install unzip sudo apt-get install libidn11-dev If you also want to run Sipi's tests, you will need ImageMagick , version 7.0.6 or higher. We suggest compiling it from source: sudo apt-get install libtiff5-dev libjpeg-turbo8-dev libopenjp2-7-dev wget https://github.com/ImageMagick/ImageMagick/archive/7.0.6-0.tar.gz tar -xzf 7.0.6-0.tar.gz cd ImageMagick-7.0.6-0/ ./configure make sudo make install sudo ldconfig /usr/local/lib Then: sudo apt-get install ab sudo apt-get install nginx sudo chown -R $USER /var/log/nginx sudo apt-get install python3 sudo apt-get install python3-pip sudo -H pip3 install --upgrade pip sudo -H pip3 install Sphinx sudo -H pip3 install pytest sudo -H pip3 install requests sudo -H pip3 install psutil sudo -H pip3 install iiif_validator","title":"Ubuntu 18.04"},{"location":"building/#debian-8","text":"First, follow the instructions for ubuntu-build. Then, CMake has to be patched. Unfortunaltely the version of CMake provided by the Debian packages contains a bug and cannot find the OpenSSL libraries and includes. To apply the patch, go to the Sipi dicrectory and run: sudo ./debian-cmake-patch.sh","title":"Debian 8"},{"location":"building/#centos-7","text":"This requires GCC version 5.3 or greater. You can install it by installing devtoolset-4 , and adding this to your .bash_profile : source scl_source enable devtoolset-4 Prerequisites for building Sipi without its automated test framework: sudo yum -y install cmake3 sudo yum -y install readline-devel sudo yum -y install doxygen sudo yum -y install patch sudo yum -y install openssl-devel sudo yum -y install gettext sudo yum -y install file-devel If you also want to run Sipi's tests, you will need ImageMagick , version 7.0.6 or higher. We suggest compiling it from source: sudo yum install libtiff-devel libjpeg-turbo-devel openjpeg2-devel wget https://github.com/ImageMagick/ImageMagick/archive/7.0.6-0.tar.gz tar -xzf 7.0.6-0.tar.gz cd ImageMagick-7.0.6-0/ ./configure make sudo make install sudo ldconfig /usr/local/lib Then: sudo yum -y install httpd-tools sudo yum -y install nginx sudo chown -R $USER /var/log/nginx sudo chown -R $USER /var/lib/nginx sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm sudo yum -y install python35u sudo yum -y install python35u-devel sudo yum -y install python35u-pip sudo pip3.5 install Sphinx sudo pip3.5 install pytest sudo pip3.5 install requests sudo pip3.5 install psutil sudo pip3.5 install iiif_validator","title":"CentOS 7"},{"location":"building/#docker_1","text":"We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/","title":"Docker"},{"location":"building/#compiling-the-source-code","text":"Start in the build subdirectory of the source tree: cd build Then compile Sipi: cmake .. make By default, Sipi is built without optimization and with debug information output. To compile Sipi with optimization level 3, run: cmake .. -DMAKE_DEBUG:BOOL=OFF make","title":"Compiling the Source Code"},{"location":"building/#running-tests","text":"You can run the automated tests in the build directory like this: make test // will run all tests (minimum output) ctest --verbose // will run all tests (detailed output) make check // will run only e2e tests (detailed output)","title":"Running Tests"},{"location":"building/#making-a-directory-tree-for-installing-sipi","text":"In build , type this to install Sipi in the local subdirectory of the source tree: make install You can then copy the contents of local to the desired location.","title":"Making a Directory Tree for Installing Sipi"},{"location":"building/#generating-documentation","text":"To generate this manual in HTML format, cd to the manual subdirectory of the source tree and type: make html You will then find the manual under manual/_build/html . To generate developer documentation about Sipi's C++ internals, cd to the build directory and type: make doc You will find the developer documentation in HTML format under doc/html . To generate developer documentation in PDF format, first ensure that you have LaTeX installed. Then cd to doc/html/latex and type make .","title":"Generating Documentation"},{"location":"building/#starting-over","text":"To delete the previous build and start over from scratch, cd to the top level of the source tree and type: rm -rf build/* lib local extsrcs include/*_icc.h","title":"Starting Over"},{"location":"building/#building-inside-docker","text":"All that was described before, can also be done by using docker. All commands need to be executed from inside the source directory (and not build the build directory). Also, Docker needs to be installed on the system. // deletes cached image and needs only to be used when newer image is available on dockerhub docker image rm --force dhlabbasel/sipi-base:18.04 // building docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. && make\" // building and running all tests docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. && make && ctest --verbose\" // make html documentation docker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/manual; make html\" Since we mount the current source directory into the docker container, all build artifacts can be accessed as if the build would have been performed without docker.","title":"Building inside Docker"},{"location":"developing/","text":"Developing Sipi Using an IDE CLion If you are using the CLion IDE, put -j 1 in Preferences -> Build, Execution, Deployment -> CMake -> Build options, to prevent CMake from building with multiple processes. Also, note that code introspection in the CLion editor may not work until it has run CMake. Code::Blocks If you are using the Code::Blocks_ IDE, you can build a cdb project: cd build cmake .. -G \"CodeBlocks - Unix Makefiles\" Writing Tests We use two test frameworks. We use googletest for unit test and pytest for end-to-end tests. Unit Tests TBA End-to-End Tests To add end-to-end tests, add a Python class in a file whose name begins with test , in the test directory. The class's methods, whose names must also begin with test , should use the manager fixture defined in test/conftest.py , which handles starting and stopping a Sipi server, and provides other functionality useful in tests. See the existing test/test_*.py files for examples. To facilitate testing client HTTP connections in Lua scripts, the manager fixture also starts and stops an nginx instance, which can be used to simulate an authorization server. For example, the provided nginx configuration file, test/nginx/nginx.conf , allows nginx to act as a dummy Knora API server for permission checking: its /v1/files route returns a static JSON file that always grants permission to view the requested file. Commit Message Schema When writing commit messages, we stick to this schema: type (scope): subject body Types: feature (new feature for the user) fix (bug fix for the user) docs (changes to the documentation) style (formatting, etc) refactor (refactoring production code, e.g. renaming a variable) test (adding missing tests, refactoring tests) build (changes to CMake configuration, etc.) enhancement (residual category) Example: feature (HTTP server): support more authentication methods","title":"Developing"},{"location":"developing/#developing-sipi","text":"","title":"Developing Sipi"},{"location":"developing/#using-an-ide","text":"","title":"Using an IDE"},{"location":"developing/#clion","text":"If you are using the CLion IDE, put -j 1 in Preferences -> Build, Execution, Deployment -> CMake -> Build options, to prevent CMake from building with multiple processes. Also, note that code introspection in the CLion editor may not work until it has run CMake.","title":"CLion"},{"location":"developing/#codeblocks","text":"If you are using the Code::Blocks_ IDE, you can build a cdb project: cd build cmake .. -G \"CodeBlocks - Unix Makefiles\"","title":"Code::Blocks"},{"location":"developing/#writing-tests","text":"We use two test frameworks. We use googletest for unit test and pytest for end-to-end tests.","title":"Writing Tests"},{"location":"developing/#unit-tests","text":"TBA","title":"Unit Tests"},{"location":"developing/#end-to-end-tests","text":"To add end-to-end tests, add a Python class in a file whose name begins with test , in the test directory. The class's methods, whose names must also begin with test , should use the manager fixture defined in test/conftest.py , which handles starting and stopping a Sipi server, and provides other functionality useful in tests. See the existing test/test_*.py files for examples. To facilitate testing client HTTP connections in Lua scripts, the manager fixture also starts and stops an nginx instance, which can be used to simulate an authorization server. For example, the provided nginx configuration file, test/nginx/nginx.conf , allows nginx to act as a dummy Knora API server for permission checking: its /v1/files route returns a static JSON file that always grants permission to view the requested file.","title":"End-to-End Tests"},{"location":"developing/#commit-message-schema","text":"When writing commit messages, we stick to this schema: type (scope): subject body Types: feature (new feature for the user) fix (bug fix for the user) docs (changes to the documentation) style (formatting, etc) refactor (refactoring production code, e.g. renaming a variable) test (adding missing tests, refactoring tests) build (changes to CMake configuration, etc.) enhancement (residual category) Example: feature (HTTP server): support more authentication methods","title":"Commit Message Schema"},{"location":"introduction/","text":"Simple Image Presentation Interface (SIPI) - Introduction What is SIPI? 1. A IIIF Image API V3 level 2 conformant image server SIPI is a full multithreaded, high performance, level2 conformant IIIF written in C++. For the JPEG2000 implementation, it relies on the commercial kakadu-library , but otherwise it is completely open source on github . It offers special support for multipage PDF's (through a SIPI-specific extensions to the IIIF Image API). SIPI has been designed with long term preservation for images regarded as culutral heritage in mind. Thus it offers some unique features fpr this purpose: all file format conversions try to preserve all metadata (EXIF, XMP, IPTC etc.). These functionality is based on the open source exiv2 library . SIPI can deal with and convert ICC color profiles based on the littlecms library . SIPI can embed important preservation data such as the checksum of the pixel values, original filename etc. in the file headers. it supports SSL (https://\u2026) SIPI embeds the scripting language LUA that allows a very flexible, highly customizable deployment that can be adapted to the enviroment SIPI is being used in. Before serving any request, a configurable LUA script (\"pre flight script\") is being executed that can check access rights, restrictions or other stuff. SIPI LUA has been extended with many SIPI-specific functions (including image conversion, HTTP-client etc.) 2. An ordinary HTTP webserver SIPI is also a normal webserver that is able to deliver arbitrary files. It also implements LUA embedded into HTML pages. Using SIPI LUA scripts and routing, RESTful interfaces may be implemented. E.g. image upload and conversions may by supported. 3. An image format conversion tool image format conversion are supported between TIFF, JPEG2000, JPG, PNG and PDF (PDF with some limitations). SIPI can be used either as standalone command line tool or in server mode using LUA scripting. SIPI preserves most embedded metadata (EXIF, IPTC, TIFF, XMP) and is preserving and/or converting ICC color profiles. Who is behind SIPI? SIPI is developed and maintained by the \"Data and Service Center for the Humanities\" (DaSCH) , a Swiss national research infrastructure financed by the Swiss National Science Foundation with contributions by the Universities of Basel and Lausanne. How to get SIPI? The easiest way is to use the docker image provided on dockerhup daschswiss/sipi . The dockerized version has the binary kakadu library compiled in. You can compile SIPI from the sources on github . Since SIPI uses many third-party open source libraries, compiling Yourself is tedious and my be frustrating (but possible). You have to provide the licensed source of kakadu by Yourself . See kakadu software on how to get a licensed version of the kakadu code. SIPI should compile on Linux (Ubuntu) and OS X SIPI as IIIF-Server Extensions to the IIIF-Standard Access to PDF Pages SIPI is able to deliver PDF's either as full file or as images using an extended IIIF-URL to access a specific page of a multipage PDF as image using the usual IIIF syntax with small extensions: - In case of a PDF, info.json includes a field numpages that indicates the total number of pages the PDF has - the image-ID given in the IIIF URL must incude a pagenumber specificer @pagenum with an integer between 1 and the maximum number of pages, e.g. https://iiif.dummy.org/images/test.pdf@12/full/,1000/default.jpg The given URL would return page #12 of the PDF test.pdf with a height of 1000 pixels. Thus, all IIIF URL parts will work as expected. Access to non-image files Sometimes it would be helpful to deliver non-image files such as XML, CSV etc. from the same directory tree as the IIIF-conformant images: - if the url has the form http(s)://{server}/{prefix}/{fileid}/info.json , SIPI returns a JSON containing information about the file. The JSON has the from - @context: \"http://sipi.io/api/file/3/context.json\" - id: \"http(s)://{server}/{prefix}/{fileid}\" - mimeType: {mimetype} . Please note that SIPI determines the mimetype using the magic number. Due to the limitations thereof the mimetype cannot be determined exactly.","title":"Introduction"},{"location":"introduction/#simple-image-presentation-interface-sipi-introduction","text":"","title":"Simple Image Presentation Interface (SIPI) - Introduction"},{"location":"introduction/#what-is-sipi","text":"","title":"What is SIPI?"},{"location":"introduction/#1-a-iiif-image-api-v3-level-2-conformant-image-server","text":"SIPI is a full multithreaded, high performance, level2 conformant IIIF written in C++. For the JPEG2000 implementation, it relies on the commercial kakadu-library , but otherwise it is completely open source on github . It offers special support for multipage PDF's (through a SIPI-specific extensions to the IIIF Image API). SIPI has been designed with long term preservation for images regarded as culutral heritage in mind. Thus it offers some unique features fpr this purpose: all file format conversions try to preserve all metadata (EXIF, XMP, IPTC etc.). These functionality is based on the open source exiv2 library . SIPI can deal with and convert ICC color profiles based on the littlecms library . SIPI can embed important preservation data such as the checksum of the pixel values, original filename etc. in the file headers. it supports SSL (https://\u2026) SIPI embeds the scripting language LUA that allows a very flexible, highly customizable deployment that can be adapted to the enviroment SIPI is being used in. Before serving any request, a configurable LUA script (\"pre flight script\") is being executed that can check access rights, restrictions or other stuff. SIPI LUA has been extended with many SIPI-specific functions (including image conversion, HTTP-client etc.)","title":"1. A IIIF Image API V3 level 2 conformant image server"},{"location":"introduction/#2-an-ordinary-http-webserver","text":"SIPI is also a normal webserver that is able to deliver arbitrary files. It also implements LUA embedded into HTML pages. Using SIPI LUA scripts and routing, RESTful interfaces may be implemented. E.g. image upload and conversions may by supported.","title":"2. An ordinary HTTP webserver"},{"location":"introduction/#3-an-image-format-conversion-tool","text":"image format conversion are supported between TIFF, JPEG2000, JPG, PNG and PDF (PDF with some limitations). SIPI can be used either as standalone command line tool or in server mode using LUA scripting. SIPI preserves most embedded metadata (EXIF, IPTC, TIFF, XMP) and is preserving and/or converting ICC color profiles.","title":"3. An image format conversion tool"},{"location":"introduction/#who-is-behind-sipi","text":"SIPI is developed and maintained by the \"Data and Service Center for the Humanities\" (DaSCH) , a Swiss national research infrastructure financed by the Swiss National Science Foundation with contributions by the Universities of Basel and Lausanne.","title":"Who is behind SIPI?"},{"location":"introduction/#how-to-get-sipi","text":"The easiest way is to use the docker image provided on dockerhup daschswiss/sipi . The dockerized version has the binary kakadu library compiled in. You can compile SIPI from the sources on github . Since SIPI uses many third-party open source libraries, compiling Yourself is tedious and my be frustrating (but possible). You have to provide the licensed source of kakadu by Yourself . See kakadu software on how to get a licensed version of the kakadu code. SIPI should compile on Linux (Ubuntu) and OS X","title":"How to get SIPI?"},{"location":"introduction/#sipi-as-iiif-server","text":"","title":"SIPI as IIIF-Server"},{"location":"introduction/#extensions-to-the-iiif-standard","text":"","title":"Extensions to the IIIF-Standard"},{"location":"introduction/#access-to-pdf-pages","text":"SIPI is able to deliver PDF's either as full file or as images using an extended IIIF-URL to access a specific page of a multipage PDF as image using the usual IIIF syntax with small extensions: - In case of a PDF, info.json includes a field numpages that indicates the total number of pages the PDF has - the image-ID given in the IIIF URL must incude a pagenumber specificer @pagenum with an integer between 1 and the maximum number of pages, e.g. https://iiif.dummy.org/images/test.pdf@12/full/,1000/default.jpg The given URL would return page #12 of the PDF test.pdf with a height of 1000 pixels. Thus, all IIIF URL parts will work as expected.","title":"Access to PDF Pages"},{"location":"introduction/#access-to-non-image-files","text":"Sometimes it would be helpful to deliver non-image files such as XML, CSV etc. from the same directory tree as the IIIF-conformant images: - if the url has the form http(s)://{server}/{prefix}/{fileid}/info.json , SIPI returns a JSON containing information about the file. The JSON has the from - @context: \"http://sipi.io/api/file/3/context.json\" - id: \"http(s)://{server}/{prefix}/{fileid}\" - mimeType: {mimetype} . Please note that SIPI determines the mimetype using the magic number. Due to the limitations thereof the mimetype cannot be determined exactly.","title":"Access to non-image files"},{"location":"lua/","text":"Customizing Sipi with Lua Scripts Within Sipi, Lua is used to perform authentication and authorization for IIIF image requests, and to write custom routes. Sipi provides the Lua interpreter the LuaRocks package manager. Sipi does not use the system's Lua interpreter or package manager. The Lua interpreter in Sipi runs in a multithreaded environment: each request runs in its own thread and has its own Lua interpreter. Therefore, only Lua packages that are known to be thread-safe may be used. Custom Routes Custom routes can be defined in Sipi's configuration file using the routes configuration variable. For example: routes = { { method = 'GET', route = '/status', script = 'get_repository_status.lua' }, { method = 'POST', route = '/make_thumbnail', script = 'make_image_thumbnail.lua' } } Sipi looks for these scripts in the directory specified by scriptdir in its configuration file. The first route that matches the beginning of the requested URL path will be used. Authentication and Authorization In Sipi's config file, initscript contains the path of a Lua script that defines a function called pre_flight . The function takes the parameters prefix , identifier and, cookie , and is called whenever an image is requested. The possible return values of the pre_flight function are as follows. Note that Lua function's return value may consist of more than one element (see Multiple Results ): Grant full permissions to access the file identified by filepath : lua return 'allow', filepath Grant restricted access to the file identified by filepath , in one of the following ways: Reduce the image dimensions, e.g. to the default thumbnail dimensions: lua return 'restrict:size=' .. \"config.thumb_size\", filepath Render the image with a watermark: lua return restrict:watermark=<path-to-watermark>, filepath Deny access to the requested file: return 'deny' IIIF Auth API The pre_flight is also responsible for activating the IIIF Auth API. In order to do so, the pre_flight script returns a table that contains all necessary information. The following fields have to be returned: - type : String giving the type. Valis are \"login\" , \"clickthrough\" , \"\"kiosk\" or \"external\" . - cookieUrl : URL where to get a valid IIIF Auth cookie for this service. - tokenUrl : URL where to get a valid IIIF Auth token for this service. - confirmLabel : Label to display in confirmation box. - description : Description for login window. - failureDescription : Information, if login fails. - failureHeader : Header for failure window. - header : Header of login window - label : Label of the login window In addition, the filepath has to be returns. A full response may look as follows: return { type = 'login', cookieUrl = 'https://localhost/iiif-cookie.html', tokenUrl = 'https://localhost/iiif-token.php', confirmLabel = 'Login to SIPI', description = 'This Example requires a demo login!', failureDescription = '<a href=\"http://example.org/policy\">Access Policy</a>', failureHeader = 'Authentication Failed', header = 'Please Log In', label = 'Login to SIPI', }, filepath In the pre_flight function, permission checking can be implemented. When Sipi is used with Knora , the pre_flight function asks Knora about the user's permissions on the image (see sipi.init-knora.lua ). The scripts Knora_login.lua and Knora_logout.lua handle the setting and unsetting of a cookie containing the Knora session ID. File uploads to SIPI Using Lua it is possible to create an upload function for image files. See the scripts upload.elua and do-upload.elua in the server directory, or upload.lua in the scripts directory. Sipi Functions Available to Lua Scripts Sipi provides the following functions that can be called from Lua scripts. Each function returns two values. The first value is true if the operation succeeded, false otherwise. If the operation succeeded, the second value is the result of the operation, otherwise it is an error message. server.setBuffer success, errmsg = server.setBuffer([bufsize][,incsize]) Activates the the connection buffer. Optionally the buffer size and increment size can be given. Returns true, nil on success or false, errormsg on failure. server.fs.ftype success, filetype = server.fs.ftype(filepath) Checks the filetype of a given filepath. Returns either true, filetype (one of \"FILE\" , \"DIRECTORY\" , \"CHARDEV\" , \"BLOCKDEV\" , \"LINK\" , \"SOCKET\" or \"UNKNOWN\" ) or false, errormsg . server.fs.modtime success, modtime = server.fs.modtime(filepath) Retrieves the last modification date of a file in seconds since epoch UTC. Returns either true , modtime or false , errormsg . server.fs.is_readable success, readable = server.fs.is_readable(filepath) Checks if a file is readable. Returns true, readable (boolean) on success or false, errormsg on failure. server.fs.is_writeable success, writeable = server.fs.is_writeable(filepath) Checks if a file is writeable. Returns true, writeable (boolean) on success or false, errormsg on failure. server.fs.is_executable success, errormsg = server.fs.is_executable(filepath) Checks if a file is executable. Returns true, executable (boolean) on success or false, errormsg on failure. server.fs.exists success, exists = server.fs.exists(filepath) Checks if a file exists. Checks if a file exists. Returns true, exists (boolean) on success or false, errormsg on failure. server.fs.unlink success, errormsg = server.fs.unlink(filename) Deletes a file from the file system. The file must exist and the user must have write access. Returns true, nil on success or false, errormsg on failure. server.fs.mkdir success, errormsg = server.fs.mkdir(dirname, [tonumber('0755', 8)]) Creates a new directory, optionally with the specified permissions. Returns true, nil on success or false, errormsg on failure. server.fs.rmdir success, errormsg = server.fs.rmdir(dirname) Deletes a directory. Returns true, nil on success or false, errormsg on failure. server.fs.getcwd success, curdir = server.fs.getcwd() Gets the current working directory. Returns true, current_dir on success or false, errormsg on failure. server.fs.readdir success, filenames = server.fs.readdir(dirname) Gets the names of the files in a directory, not including . and .. . Returns true, table on success or false, errormsg on failure. server.fs.chdir success, oldir = server.fs.chdir(newdir) Change working directory. Returns true, olddir on success or false, errormsg on failure. server.fs.copyFile success, errormsg = server.fs.copyFile(source, destination) Copies a file from source to destination. Returns true, nil on success or false, errormsg on failure. server.fs.moveFile success, errormsg = server.fs.moveFile(from, to) Moves a file. The move connot cross filesystem boundaries! true, nil on success or false, errormsg on failure. server.uuid success, uuid = server.uuid() Generates a random UUID version 4 identifier in canonical form, as described in RFC 4122 . Returns true, uuid on success or false, errormsg on failure. server.uuid62 success, uuid62 = server.uuid62() Generates a Base62-encoded UUID. Returns true, uuid62 on success or false, errormsg on failure. server.uuid_to_base62 success, uuid62 = server.uuid_to_base62(uuid) Converts a canonical UUID string to a Base62-encoded UUID. Returns true, uuid62 on success or false, errormsg on failure. server.base62_to_uuid success, uuid = server.base62_to_uuid(uuid62) Converts a Base62-encoded UUID to canonical form. Returns true, uuid on success or false, errormsg on failure. server.print success, errormsg = server.print(values) Prints variables and/or strings to the HTTP connection. Returns true, nil on success or false, errormsg on failure. server.http success, result = server.http(method, \"http://server.domain[:port]/path/file\" [, header] [, timeout]) Performs an HTTP request. Parameters: method : The HTTP request method. Currently must be \"GET\" . url : The HTTP URL. header : An optional table of key-value pairs representing HTTP request headers. timeout : An optional number of milliseconds until the connection times out. Authentication is not yet supported. The result is a table: result = { status_code = value -- HTTP status code returned erromsg = \"error description\" -- only if success is false header = { name = value [, name = value, ...] }, certificate = { -- only if HTTPS connection subject = value, issuer = value }, body = data, duration = milliseconds } Example: success, result = server.http(\"GET\", \"http://www.salsah.org/api/resources/1\", 100) if (result.success) then server.print(\"<table>\") server.print(\"<tr><th>Field</th><th>Value</th></tr>\") for k,v in pairs(server.header) do server.print(\"<tr><td>\", k, \"</td><td>\", v, \"</td></tr>\") end server.print(\"</table><hr/>\") server.print(\"Duration: \", result.duration, \" ms<br/><hr/>\") server.print(\"Body:<br/>\", result.body) else server.print(\"ERROR: \", result.errmsg) end server.table_to_json :: : success, jsonstr = server.table_to_json(table) Converts a (nested) Lua table to a JSON string. Returns true, jsonstr on success or false, errormsg on failure. server.json_to_table success, table = server.json_to_table(jsonstr) Converts a JSON string to a (nested) Lua table. Returns true, table on success or false, errormsg on failure. server.sendHeader success, errormsg = server.sendHeader(key, value) Sets an HTTP response header. Returns true, nil on success or false, errormsg on failure. server.sendCookie success, errormsg = server.sendCookie(key, value [, options-table]) Sets a cookie in the HTTP response. Returns true, nil on success or false, errormsg on failure. The optional options-table is a Lua table containing the following keys: path domain expires (value in seconds) secure (boolean) http_only (boolean) server.sendStatus server.sendStatus(code) Sends an HTTP status code. This function is always successful and returns nothing. server.generate_jwt success, token = server.generate_jwt(table) Generates a JSON Web Token (JWT) with the table as payload. Returns true, token on success or false, errormsg on failure. The table contains the JWT claims as follows. (The type IntDate is a number of seconds since 1970-01-01T0:0:0Z): iss (string => StringOrURI) OPT: principal that issued the JWT. exp (number => IntDate) OPT: expiration time on or after which the token MUST NOT be accepted for processing. nbf (number => IntDate) OPT: identifies the time before which the token MUST NOT be accepted for processing. iat (number => IntDate) OPT: identifies the time at which the JWT was issued. aud (string => StringOrURI) OPT: identifies the audience that the JWT is intended for. The audience value is a string, typically the base address of the resource being accessed, such as https://contoso.com . prn (string => StringOrURI) OPT: identifies the subject of the JWT. jti (string => String) OPT: provides a unique identifier for the JWT. server.decode_jwt success, table = server.decode_jwt(token) Decodes a JSON Web Token (JWT) and returns its content as table. Returns true, table on success or false, errormsg on failure. server.file_mimetype success, table = server.file_mimetype(path) success, table = server.file_mimetype(index) Determines the mimetype of a file. The first form is used if the file path is known. The second form can be used for uploads by passing the file index. It returns true, table on success or false, errormsg on failure. The table has 2 members: - mimetype - charset server.file_mimeconsistency success, is_consistent = server.file_mimeconsistency(path) success, is_consistent = server.file_mimeconsistency(index) Checks if the file extension and the mimetype determined by the magic of the file is consistent. The first form requires a path (including the filename with extension), the second can be used for checking uploads by passing the file index. It returns true, is_consistent on success or false, errormsg in case of an error. is_consistent is true if the mimetype corresponds to the file extension. server.requireAuth success, table = server.requireAuth() Gets HTTP authentication data. Returns true, table on success or false, errormsg on failure. The result is a table: { status = string -- \"BASIC\" | \"BEARER\" | \"NOAUTH\" (no authorization header) | \"ERROR\" username = string -- only if status = \"BASIC\" password = string -- only if status = \"BASIC\" token = string -- only if status = \"BEARER\" message = string -- only if status = \"ERROR\" } Example: success, auth = server.requireAuth() if not success then server.sendStatus(501) server.print(\"Error in getting authentication scheme!\") return -1 end if auth.status == 'BASIC' then -- -- everything OK, let's create the token for further calls and ad it to a cookie -- if auth.username == config.adminuser and auth.password == config.password then tokendata = { iss = \"sipi.unibas.ch\", aud = \"knora.org\", user = auth.username } success, token = server.generate_jwt(tokendata) if not success then server.sendStatus(501) server.print(\"Could not generate JWT!\") return -1 end success, errormsg = server.sendCookie('sipi', token, {path = '/', expires = 3600}) if not success then server.sendStatus(501) server.print(\"Couldn't send cookie with JWT!\") return -1 end else server.sendStatus(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') server.print(\"Wrong credentials!\") return -1 end elseif auth.status == 'BEARER' then success, jwt = server.decode_jwt(auth.token) if not success then server.sendStatus(501) server.print(\"Couldn't deocde JWT!\") return -1 end if (jwt.iss ~= 'sipi.unibas.ch') or (jwt.aud ~= 'knora.org') or (jwt.user ~= config.adminuser) then server.sendStatus(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 end elseif auth.status == 'NOAUTH' then server.setBuffer() server.sendStatus(401); server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 else server.status(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 end server.copyTmpfile success, errormsg = server.copyTmpfile(from, to) Sipi saves each uploaded file in a temporary location (given by the config variable tmpdir ) and deletes it after the request has been served. This function is used to copy the file to another location where it can be retrieved later. Returns true, nil on success or false, errormsg on failure. Parameters: - from : an index (integer value) of array server.uploads. - target : an absolute path server.systime systime = server.systime() Returns the current system time on the server in seconds since epoch. server.log server.log(message, loglevel) Writes a message to syslog . Severity levels are: server.loglevel.LOG_EMERG server.loglevel.LOG_ALERT server.loglevel.LOG_CRIT server.loglevel.LOG_ERR server.loglevel.LOG_WARNING server.loglevel.LOG_NOTICE server.loglevel.LOG_INFO server.loglevel.LOG_DEBUG Sipi Variables Available to Lua Scripts config.hostname : Hostname where SIPI runs on config.port : Portnumber where SIPI communicates (non SSL) config.sslport : Portnumber for SSL connections of SIPI config.imgroot : Root directory for IIIF-served images config.docroot : Root directory for WEB-Server config.max_temp_file_age : maximum age of temporary files config.prefix_as_path : true if the prefix should be used as internal path image directories config.init_script : Path to initialization script config.scriptdir : Path to script directory config.cache_dir : Path to cache directory for iIIF served images config.cache_size : Maximal size of cache config.cache_n_files : Maximal number of files in cache config.cache_hysteresis : Amount fo data to be purged if cache reaches maximum size config.keep_alive : keep alive time config.thumb_size : Default thumbnail image size config.n_threads : Number of threads SIPI uses config.max_post_size : Maximal size of POST data allowed config.tmpdir : Temporary directory to store uploads config.knora_path : Path to knora REST API (only for SIPI used with Knora) config.knora_port : Port that the Knora API uses config.adminuser : Name of admin user config.password : Password of admin user (use with caution)! server.has_openssl : true if OpenSSL is available. server.secure : true if the connection was made over HTTPS. server.host : the hostname of the Sipi server that was used in the request. server.client_ip : the IPv4 or IPv6 address of the client connecting to Sipi. server.client_port : the port number of the client socket. server.uri : the URL path used to access Sipi (does not include the hostname). server.header : a table containing all the HTTP request headers (in lowercase). server.cookies : a table of the cookies that were sent with the request. server.get : a table of GET request parameters. server.post : a table of POST or PUT request parameters. server.request : all request parameters. server.uploads : an array of upload parameters, one per file. Each one is a table containing: : - fieldname : the name of the form field. - origname : the original filename. - tmpname : a temporary path to the uploaded file. - mimetype : the MIME type of the uploaded file as provided by the browser. - filesize : the size of uploaded file in bytes. Lua helper functions helper.filename_hash success, filepath = helper.filename_hash(fileid) if subdir_levels (see configuration file) is > 0, recursive subdirectories named 'A', 'B',.., 'Z' are used to split the image files across multiple directories. A simple hash-algorithm is being used. This function returns a filepath with the subdirectories prepended, e.g gaga.jp2 becomes C/W/gaga.jpg Example: success, newfilepath = helper.filename_hash(newfilename[imgindex]); if not success then server.sendStatus(500) server.log(gaga, server.loglevel.LOG_ERR) return false end filename = config.imgroot .. '/' .. newfilepath Lua image functions There is an image object implemented which allows to manipulate and convert images. SipiImage.new(filename) The simple forms are: img = SipiImage.new(\"filename\") img = SipiImage.new(index) The first variant opens a file given by \"filename\", the second variant opens an uploaded file directly using the integer index to the uploaded files. If the index of an uploaded file is passed as an argument, this method adds additional metadata to the SipiImage object that is constructed: the file's original name, its MIME type, and its SHA256 checksum. When the SipiImage object is then written to another file, this metadata will be stored in an extra header record. If a filename is passed, the method does not add this metadata. The more complex form is as follows: img = SipiImage.new(\"filename\", { region=<iiif-region-string>, size=<iiif-size-string>, reduce=<integer>, original=origfilename, hash=\"md5\"|\"sha1\"|\"sha256\"|\"sha384\"|\"sha512\" }) This creates a new Lua image object and loads the given image into. The second form allows to indicate a region, the size or a reduce factor and the original filename. The hash parameter indicates that the given checksum should be calculated out of the pixel values and written into the header. SipiImage.dims() success, dims = img.dims() if success then server.print('nx=', dims.nx, ' ny=', dims.ny) end Returns the dimensions of the image. SipiImage.crop(<iiif-region-string>) success, errormsg = img.crop(<IIIF-region-string>) Crops the image to the given rectangular region. The parameter must be a valid IIIF-region string. SipiImage.scale(<iiif-size-string>) success, errormsg = img.scale(<iiif-size-string>) Resizes the image to the given size as iiif-conformant size string. SipiImage.rotate(<iiif-rotation-string>) success, errormsg = img.rotate(<iiif-rotation-string>) Rotates and/or mirrors the image according the given iiif-conformant rotation string. SipiImage.watermark(<wm-file-path>) success, errormsg = img.watermark(<wm-file-path>) Applies the given watermark file to the image. The watermark file must be a bitonal TIFF file. SipiImage.write(<filepath>) success, errormsg = img.write(<filepath>) success, errormsg = img.write('HTTP.jpg') The first version write the image to a file, the second writes the file to the HTTP connection. The file format is determined by the extension: jpg : writes a JPEG file tif : writes a TIFF file png : writes a png file jpx : writes a JPGE2000 file SipiImage.send(<format>) success, errormsg = img.send(<format>) Sends the file to the HTTP connection. As format are allowed: jpg : writes a JPEG file tif : writes a TIFF file png : writes a png file jpx : writes a JPGE2000 file Installing Lua modules To install Lua modules that can be used in Lua scripts, use local/bin/luarocks . Make sure that the location where the modules are stored is in the Lua package path, which is printed by local/bin/lurocks path. The Lua paths will be used by the Lua interpreter when loading modules in a script with require (see Using LuaRocks to install packages in the current directory ). For example, using local/bin/luarocks install --local package , the package will be installed in ~/.luarocks/ . To include this path in the Lua's interpreter package search path, you can use an environment variable. Running local/bin/luarocks path outputs the code you can use to do so. Alternatively, you can build the package path at the beginning of a Lua file by setting package.path and package.cpath (see Running scripts with packages ). Using SQLite in Lua Scripts Sipi supports SQLite 3 databases, which can be accessed from Lua scripts. You should use pcall to handle errors that may be returned by SQLite. Opening an SQLite Database db = sqlite('db/test.db', 'RW') This creates a new opaque database object. The first parameter is the path to the database file. The second parameter may be 'RO' for read-only access, 'RW' for read-write access, or 'CRW' for read-write access. If the database file does not exist, it will be created using this option. To destroy the database object and free all resources, you can do this: ``` {.sourceCode .none} db = ~db However, Lua's garbage collection will destroy the database object and free all resources when they are no longer used. ### Preparing a Query qry = db << 'SELECT * FROM image' Or, if you want to use a prepared query statement: qry = db << 'INSERT INTO image (id, description) VALUES (?,?)' `qry` will then be a query object containing a prepared query. If the query object is not needed anymore, it may be destroyed: ``` {.sourceCode .none} qry = ~qry Query objects should be destroyed explicitly if not needed any longer. Executing a Query row = qry() while (row) do print(row[0], ' -> ', row[1]) row = qry() end Or with a prepared statement: qry('SGV_1960_00315', 'This is an image of a steam engine...') The second way is used for prepared queries that contain parameters.","title":"Lua"},{"location":"lua/#customizing-sipi-with-lua-scripts","text":"Within Sipi, Lua is used to perform authentication and authorization for IIIF image requests, and to write custom routes. Sipi provides the Lua interpreter the LuaRocks package manager. Sipi does not use the system's Lua interpreter or package manager. The Lua interpreter in Sipi runs in a multithreaded environment: each request runs in its own thread and has its own Lua interpreter. Therefore, only Lua packages that are known to be thread-safe may be used.","title":"Customizing Sipi with Lua Scripts"},{"location":"lua/#custom-routes","text":"Custom routes can be defined in Sipi's configuration file using the routes configuration variable. For example: routes = { { method = 'GET', route = '/status', script = 'get_repository_status.lua' }, { method = 'POST', route = '/make_thumbnail', script = 'make_image_thumbnail.lua' } } Sipi looks for these scripts in the directory specified by scriptdir in its configuration file. The first route that matches the beginning of the requested URL path will be used.","title":"Custom Routes"},{"location":"lua/#authentication-and-authorization","text":"In Sipi's config file, initscript contains the path of a Lua script that defines a function called pre_flight . The function takes the parameters prefix , identifier and, cookie , and is called whenever an image is requested. The possible return values of the pre_flight function are as follows. Note that Lua function's return value may consist of more than one element (see Multiple Results ): Grant full permissions to access the file identified by filepath : lua return 'allow', filepath Grant restricted access to the file identified by filepath , in one of the following ways: Reduce the image dimensions, e.g. to the default thumbnail dimensions: lua return 'restrict:size=' .. \"config.thumb_size\", filepath Render the image with a watermark: lua return restrict:watermark=<path-to-watermark>, filepath Deny access to the requested file: return 'deny'","title":"Authentication and Authorization"},{"location":"lua/#iiif-auth-api","text":"The pre_flight is also responsible for activating the IIIF Auth API. In order to do so, the pre_flight script returns a table that contains all necessary information. The following fields have to be returned: - type : String giving the type. Valis are \"login\" , \"clickthrough\" , \"\"kiosk\" or \"external\" . - cookieUrl : URL where to get a valid IIIF Auth cookie for this service. - tokenUrl : URL where to get a valid IIIF Auth token for this service. - confirmLabel : Label to display in confirmation box. - description : Description for login window. - failureDescription : Information, if login fails. - failureHeader : Header for failure window. - header : Header of login window - label : Label of the login window In addition, the filepath has to be returns. A full response may look as follows: return { type = 'login', cookieUrl = 'https://localhost/iiif-cookie.html', tokenUrl = 'https://localhost/iiif-token.php', confirmLabel = 'Login to SIPI', description = 'This Example requires a demo login!', failureDescription = '<a href=\"http://example.org/policy\">Access Policy</a>', failureHeader = 'Authentication Failed', header = 'Please Log In', label = 'Login to SIPI', }, filepath In the pre_flight function, permission checking can be implemented. When Sipi is used with Knora , the pre_flight function asks Knora about the user's permissions on the image (see sipi.init-knora.lua ). The scripts Knora_login.lua and Knora_logout.lua handle the setting and unsetting of a cookie containing the Knora session ID.","title":"IIIF Auth API"},{"location":"lua/#file-uploads-to-sipi","text":"Using Lua it is possible to create an upload function for image files. See the scripts upload.elua and do-upload.elua in the server directory, or upload.lua in the scripts directory.","title":"File uploads to SIPI"},{"location":"lua/#sipi-functions-available-to-lua-scripts","text":"Sipi provides the following functions that can be called from Lua scripts. Each function returns two values. The first value is true if the operation succeeded, false otherwise. If the operation succeeded, the second value is the result of the operation, otherwise it is an error message.","title":"Sipi Functions Available to Lua Scripts"},{"location":"lua/#serversetbuffer","text":"success, errmsg = server.setBuffer([bufsize][,incsize]) Activates the the connection buffer. Optionally the buffer size and increment size can be given. Returns true, nil on success or false, errormsg on failure.","title":"server.setBuffer"},{"location":"lua/#serverfsftype","text":"success, filetype = server.fs.ftype(filepath) Checks the filetype of a given filepath. Returns either true, filetype (one of \"FILE\" , \"DIRECTORY\" , \"CHARDEV\" , \"BLOCKDEV\" , \"LINK\" , \"SOCKET\" or \"UNKNOWN\" ) or false, errormsg .","title":"server.fs.ftype"},{"location":"lua/#serverfsmodtime","text":"success, modtime = server.fs.modtime(filepath) Retrieves the last modification date of a file in seconds since epoch UTC. Returns either true , modtime or false , errormsg .","title":"server.fs.modtime"},{"location":"lua/#serverfsis95readable","text":"success, readable = server.fs.is_readable(filepath) Checks if a file is readable. Returns true, readable (boolean) on success or false, errormsg on failure.","title":"server.fs.is_readable"},{"location":"lua/#serverfsis95writeable","text":"success, writeable = server.fs.is_writeable(filepath) Checks if a file is writeable. Returns true, writeable (boolean) on success or false, errormsg on failure.","title":"server.fs.is_writeable"},{"location":"lua/#serverfsis95executable","text":"success, errormsg = server.fs.is_executable(filepath) Checks if a file is executable. Returns true, executable (boolean) on success or false, errormsg on failure.","title":"server.fs.is_executable"},{"location":"lua/#serverfsexists","text":"success, exists = server.fs.exists(filepath) Checks if a file exists. Checks if a file exists. Returns true, exists (boolean) on success or false, errormsg on failure.","title":"server.fs.exists"},{"location":"lua/#serverfsunlink","text":"success, errormsg = server.fs.unlink(filename) Deletes a file from the file system. The file must exist and the user must have write access. Returns true, nil on success or false, errormsg on failure.","title":"server.fs.unlink"},{"location":"lua/#serverfsmkdir","text":"success, errormsg = server.fs.mkdir(dirname, [tonumber('0755', 8)]) Creates a new directory, optionally with the specified permissions. Returns true, nil on success or false, errormsg on failure.","title":"server.fs.mkdir"},{"location":"lua/#serverfsrmdir","text":"success, errormsg = server.fs.rmdir(dirname) Deletes a directory. Returns true, nil on success or false, errormsg on failure.","title":"server.fs.rmdir"},{"location":"lua/#serverfsgetcwd","text":"success, curdir = server.fs.getcwd() Gets the current working directory. Returns true, current_dir on success or false, errormsg on failure.","title":"server.fs.getcwd"},{"location":"lua/#serverfsreaddir","text":"success, filenames = server.fs.readdir(dirname) Gets the names of the files in a directory, not including . and .. . Returns true, table on success or false, errormsg on failure.","title":"server.fs.readdir"},{"location":"lua/#serverfschdir","text":"success, oldir = server.fs.chdir(newdir) Change working directory. Returns true, olddir on success or false, errormsg on failure.","title":"server.fs.chdir"},{"location":"lua/#serverfscopyfile","text":"success, errormsg = server.fs.copyFile(source, destination) Copies a file from source to destination. Returns true, nil on success or false, errormsg on failure.","title":"server.fs.copyFile"},{"location":"lua/#serverfsmovefile","text":"success, errormsg = server.fs.moveFile(from, to) Moves a file. The move connot cross filesystem boundaries! true, nil on success or false, errormsg on failure.","title":"server.fs.moveFile"},{"location":"lua/#serveruuid","text":"success, uuid = server.uuid() Generates a random UUID version 4 identifier in canonical form, as described in RFC 4122 . Returns true, uuid on success or false, errormsg on failure.","title":"server.uuid"},{"location":"lua/#serveruuid62","text":"success, uuid62 = server.uuid62() Generates a Base62-encoded UUID. Returns true, uuid62 on success or false, errormsg on failure.","title":"server.uuid62"},{"location":"lua/#serveruuid95to95base62","text":"success, uuid62 = server.uuid_to_base62(uuid) Converts a canonical UUID string to a Base62-encoded UUID. Returns true, uuid62 on success or false, errormsg on failure.","title":"server.uuid_to_base62"},{"location":"lua/#serverbase6295to95uuid","text":"success, uuid = server.base62_to_uuid(uuid62) Converts a Base62-encoded UUID to canonical form. Returns true, uuid on success or false, errormsg on failure.","title":"server.base62_to_uuid"},{"location":"lua/#serverprint","text":"success, errormsg = server.print(values) Prints variables and/or strings to the HTTP connection. Returns true, nil on success or false, errormsg on failure.","title":"server.print"},{"location":"lua/#serverhttp","text":"success, result = server.http(method, \"http://server.domain[:port]/path/file\" [, header] [, timeout]) Performs an HTTP request. Parameters: method : The HTTP request method. Currently must be \"GET\" . url : The HTTP URL. header : An optional table of key-value pairs representing HTTP request headers. timeout : An optional number of milliseconds until the connection times out. Authentication is not yet supported. The result is a table: result = { status_code = value -- HTTP status code returned erromsg = \"error description\" -- only if success is false header = { name = value [, name = value, ...] }, certificate = { -- only if HTTPS connection subject = value, issuer = value }, body = data, duration = milliseconds } Example: success, result = server.http(\"GET\", \"http://www.salsah.org/api/resources/1\", 100) if (result.success) then server.print(\"<table>\") server.print(\"<tr><th>Field</th><th>Value</th></tr>\") for k,v in pairs(server.header) do server.print(\"<tr><td>\", k, \"</td><td>\", v, \"</td></tr>\") end server.print(\"</table><hr/>\") server.print(\"Duration: \", result.duration, \" ms<br/><hr/>\") server.print(\"Body:<br/>\", result.body) else server.print(\"ERROR: \", result.errmsg) end","title":"server.http"},{"location":"lua/#servertable95to95json","text":":: : success, jsonstr = server.table_to_json(table) Converts a (nested) Lua table to a JSON string. Returns true, jsonstr on success or false, errormsg on failure.","title":"server.table_to_json"},{"location":"lua/#serverjson95to95table","text":"success, table = server.json_to_table(jsonstr) Converts a JSON string to a (nested) Lua table. Returns true, table on success or false, errormsg on failure.","title":"server.json_to_table"},{"location":"lua/#serversendheader","text":"success, errormsg = server.sendHeader(key, value) Sets an HTTP response header. Returns true, nil on success or false, errormsg on failure.","title":"server.sendHeader"},{"location":"lua/#serversendcookie","text":"success, errormsg = server.sendCookie(key, value [, options-table]) Sets a cookie in the HTTP response. Returns true, nil on success or false, errormsg on failure. The optional options-table is a Lua table containing the following keys: path domain expires (value in seconds) secure (boolean) http_only (boolean)","title":"server.sendCookie"},{"location":"lua/#serversendstatus","text":"server.sendStatus(code) Sends an HTTP status code. This function is always successful and returns nothing.","title":"server.sendStatus"},{"location":"lua/#servergenerate95jwt","text":"success, token = server.generate_jwt(table) Generates a JSON Web Token (JWT) with the table as payload. Returns true, token on success or false, errormsg on failure. The table contains the JWT claims as follows. (The type IntDate is a number of seconds since 1970-01-01T0:0:0Z): iss (string => StringOrURI) OPT: principal that issued the JWT. exp (number => IntDate) OPT: expiration time on or after which the token MUST NOT be accepted for processing. nbf (number => IntDate) OPT: identifies the time before which the token MUST NOT be accepted for processing. iat (number => IntDate) OPT: identifies the time at which the JWT was issued. aud (string => StringOrURI) OPT: identifies the audience that the JWT is intended for. The audience value is a string, typically the base address of the resource being accessed, such as https://contoso.com . prn (string => StringOrURI) OPT: identifies the subject of the JWT. jti (string => String) OPT: provides a unique identifier for the JWT.","title":"server.generate_jwt"},{"location":"lua/#serverdecode95jwt","text":"success, table = server.decode_jwt(token) Decodes a JSON Web Token (JWT) and returns its content as table. Returns true, table on success or false, errormsg on failure.","title":"server.decode_jwt"},{"location":"lua/#serverfile95mimetype","text":"success, table = server.file_mimetype(path) success, table = server.file_mimetype(index) Determines the mimetype of a file. The first form is used if the file path is known. The second form can be used for uploads by passing the file index. It returns true, table on success or false, errormsg on failure. The table has 2 members: - mimetype - charset","title":"server.file_mimetype"},{"location":"lua/#serverfile95mimeconsistency","text":"success, is_consistent = server.file_mimeconsistency(path) success, is_consistent = server.file_mimeconsistency(index) Checks if the file extension and the mimetype determined by the magic of the file is consistent. The first form requires a path (including the filename with extension), the second can be used for checking uploads by passing the file index. It returns true, is_consistent on success or false, errormsg in case of an error. is_consistent is true if the mimetype corresponds to the file extension.","title":"server.file_mimeconsistency"},{"location":"lua/#serverrequireauth","text":"success, table = server.requireAuth() Gets HTTP authentication data. Returns true, table on success or false, errormsg on failure. The result is a table: { status = string -- \"BASIC\" | \"BEARER\" | \"NOAUTH\" (no authorization header) | \"ERROR\" username = string -- only if status = \"BASIC\" password = string -- only if status = \"BASIC\" token = string -- only if status = \"BEARER\" message = string -- only if status = \"ERROR\" } Example: success, auth = server.requireAuth() if not success then server.sendStatus(501) server.print(\"Error in getting authentication scheme!\") return -1 end if auth.status == 'BASIC' then -- -- everything OK, let's create the token for further calls and ad it to a cookie -- if auth.username == config.adminuser and auth.password == config.password then tokendata = { iss = \"sipi.unibas.ch\", aud = \"knora.org\", user = auth.username } success, token = server.generate_jwt(tokendata) if not success then server.sendStatus(501) server.print(\"Could not generate JWT!\") return -1 end success, errormsg = server.sendCookie('sipi', token, {path = '/', expires = 3600}) if not success then server.sendStatus(501) server.print(\"Couldn't send cookie with JWT!\") return -1 end else server.sendStatus(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') server.print(\"Wrong credentials!\") return -1 end elseif auth.status == 'BEARER' then success, jwt = server.decode_jwt(auth.token) if not success then server.sendStatus(501) server.print(\"Couldn't deocde JWT!\") return -1 end if (jwt.iss ~= 'sipi.unibas.ch') or (jwt.aud ~= 'knora.org') or (jwt.user ~= config.adminuser) then server.sendStatus(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 end elseif auth.status == 'NOAUTH' then server.setBuffer() server.sendStatus(401); server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 else server.status(401) server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"') return -1 end","title":"server.requireAuth"},{"location":"lua/#servercopytmpfile","text":"success, errormsg = server.copyTmpfile(from, to) Sipi saves each uploaded file in a temporary location (given by the config variable tmpdir ) and deletes it after the request has been served. This function is used to copy the file to another location where it can be retrieved later. Returns true, nil on success or false, errormsg on failure. Parameters: - from : an index (integer value) of array server.uploads. - target : an absolute path","title":"server.copyTmpfile"},{"location":"lua/#serversystime","text":"systime = server.systime() Returns the current system time on the server in seconds since epoch.","title":"server.systime"},{"location":"lua/#serverlog","text":"server.log(message, loglevel) Writes a message to syslog . Severity levels are: server.loglevel.LOG_EMERG server.loglevel.LOG_ALERT server.loglevel.LOG_CRIT server.loglevel.LOG_ERR server.loglevel.LOG_WARNING server.loglevel.LOG_NOTICE server.loglevel.LOG_INFO server.loglevel.LOG_DEBUG","title":"server.log"},{"location":"lua/#sipi-variables-available-to-lua-scripts","text":"config.hostname : Hostname where SIPI runs on config.port : Portnumber where SIPI communicates (non SSL) config.sslport : Portnumber for SSL connections of SIPI config.imgroot : Root directory for IIIF-served images config.docroot : Root directory for WEB-Server config.max_temp_file_age : maximum age of temporary files config.prefix_as_path : true if the prefix should be used as internal path image directories config.init_script : Path to initialization script config.scriptdir : Path to script directory config.cache_dir : Path to cache directory for iIIF served images config.cache_size : Maximal size of cache config.cache_n_files : Maximal number of files in cache config.cache_hysteresis : Amount fo data to be purged if cache reaches maximum size config.keep_alive : keep alive time config.thumb_size : Default thumbnail image size config.n_threads : Number of threads SIPI uses config.max_post_size : Maximal size of POST data allowed config.tmpdir : Temporary directory to store uploads config.knora_path : Path to knora REST API (only for SIPI used with Knora) config.knora_port : Port that the Knora API uses config.adminuser : Name of admin user config.password : Password of admin user (use with caution)! server.has_openssl : true if OpenSSL is available. server.secure : true if the connection was made over HTTPS. server.host : the hostname of the Sipi server that was used in the request. server.client_ip : the IPv4 or IPv6 address of the client connecting to Sipi. server.client_port : the port number of the client socket. server.uri : the URL path used to access Sipi (does not include the hostname). server.header : a table containing all the HTTP request headers (in lowercase). server.cookies : a table of the cookies that were sent with the request. server.get : a table of GET request parameters. server.post : a table of POST or PUT request parameters. server.request : all request parameters. server.uploads : an array of upload parameters, one per file. Each one is a table containing: : - fieldname : the name of the form field. - origname : the original filename. - tmpname : a temporary path to the uploaded file. - mimetype : the MIME type of the uploaded file as provided by the browser. - filesize : the size of uploaded file in bytes.","title":"Sipi Variables Available to Lua Scripts"},{"location":"lua/#lua-helper-functions","text":"","title":"Lua helper functions"},{"location":"lua/#helperfilename95hash","text":"success, filepath = helper.filename_hash(fileid) if subdir_levels (see configuration file) is > 0, recursive subdirectories named 'A', 'B',.., 'Z' are used to split the image files across multiple directories. A simple hash-algorithm is being used. This function returns a filepath with the subdirectories prepended, e.g gaga.jp2 becomes C/W/gaga.jpg Example: success, newfilepath = helper.filename_hash(newfilename[imgindex]); if not success then server.sendStatus(500) server.log(gaga, server.loglevel.LOG_ERR) return false end filename = config.imgroot .. '/' .. newfilepath","title":"helper.filename_hash"},{"location":"lua/#lua-image-functions","text":"There is an image object implemented which allows to manipulate and convert images.","title":"Lua image functions"},{"location":"lua/#sipiimagenewfilename","text":"The simple forms are: img = SipiImage.new(\"filename\") img = SipiImage.new(index) The first variant opens a file given by \"filename\", the second variant opens an uploaded file directly using the integer index to the uploaded files. If the index of an uploaded file is passed as an argument, this method adds additional metadata to the SipiImage object that is constructed: the file's original name, its MIME type, and its SHA256 checksum. When the SipiImage object is then written to another file, this metadata will be stored in an extra header record. If a filename is passed, the method does not add this metadata. The more complex form is as follows: img = SipiImage.new(\"filename\", { region=<iiif-region-string>, size=<iiif-size-string>, reduce=<integer>, original=origfilename, hash=\"md5\"|\"sha1\"|\"sha256\"|\"sha384\"|\"sha512\" }) This creates a new Lua image object and loads the given image into. The second form allows to indicate a region, the size or a reduce factor and the original filename. The hash parameter indicates that the given checksum should be calculated out of the pixel values and written into the header.","title":"SipiImage.new(filename)"},{"location":"lua/#sipiimagedims","text":"success, dims = img.dims() if success then server.print('nx=', dims.nx, ' ny=', dims.ny) end Returns the dimensions of the image.","title":"SipiImage.dims()"},{"location":"lua/#sipiimagecropiiif-region-string","text":"success, errormsg = img.crop(<IIIF-region-string>) Crops the image to the given rectangular region. The parameter must be a valid IIIF-region string.","title":"SipiImage.crop(&lt;iiif-region-string&gt;)"},{"location":"lua/#sipiimagescaleiiif-size-string","text":"success, errormsg = img.scale(<iiif-size-string>) Resizes the image to the given size as iiif-conformant size string.","title":"SipiImage.scale(&lt;iiif-size-string&gt;)"},{"location":"lua/#sipiimagerotateiiif-rotation-string","text":"success, errormsg = img.rotate(<iiif-rotation-string>) Rotates and/or mirrors the image according the given iiif-conformant rotation string.","title":"SipiImage.rotate(&lt;iiif-rotation-string&gt;)"},{"location":"lua/#sipiimagewatermarkwm-file-path","text":"success, errormsg = img.watermark(<wm-file-path>) Applies the given watermark file to the image. The watermark file must be a bitonal TIFF file.","title":"SipiImage.watermark(&lt;wm-file-path&gt;)"},{"location":"lua/#sipiimagewritefilepath","text":"success, errormsg = img.write(<filepath>) success, errormsg = img.write('HTTP.jpg') The first version write the image to a file, the second writes the file to the HTTP connection. The file format is determined by the extension: jpg : writes a JPEG file tif : writes a TIFF file png : writes a png file jpx : writes a JPGE2000 file","title":"SipiImage.write(&lt;filepath&gt;)"},{"location":"lua/#sipiimagesendformat","text":"success, errormsg = img.send(<format>) Sends the file to the HTTP connection. As format are allowed: jpg : writes a JPEG file tif : writes a TIFF file png : writes a png file jpx : writes a JPGE2000 file","title":"SipiImage.send(&lt;format&gt;)"},{"location":"lua/#installing-lua-modules","text":"To install Lua modules that can be used in Lua scripts, use local/bin/luarocks . Make sure that the location where the modules are stored is in the Lua package path, which is printed by local/bin/lurocks path. The Lua paths will be used by the Lua interpreter when loading modules in a script with require (see Using LuaRocks to install packages in the current directory ). For example, using local/bin/luarocks install --local package , the package will be installed in ~/.luarocks/ . To include this path in the Lua's interpreter package search path, you can use an environment variable. Running local/bin/luarocks path outputs the code you can use to do so. Alternatively, you can build the package path at the beginning of a Lua file by setting package.path and package.cpath (see Running scripts with packages ).","title":"Installing Lua modules"},{"location":"lua/#using-sqlite-in-lua-scripts","text":"Sipi supports SQLite 3 databases, which can be accessed from Lua scripts. You should use pcall to handle errors that may be returned by SQLite.","title":"Using SQLite in Lua Scripts"},{"location":"lua/#opening-an-sqlite-database","text":"db = sqlite('db/test.db', 'RW') This creates a new opaque database object. The first parameter is the path to the database file. The second parameter may be 'RO' for read-only access, 'RW' for read-write access, or 'CRW' for read-write access. If the database file does not exist, it will be created using this option. To destroy the database object and free all resources, you can do this: ``` {.sourceCode .none} db = ~db However, Lua's garbage collection will destroy the database object and free all resources when they are no longer used. ### Preparing a Query qry = db << 'SELECT * FROM image' Or, if you want to use a prepared query statement: qry = db << 'INSERT INTO image (id, description) VALUES (?,?)' `qry` will then be a query object containing a prepared query. If the query object is not needed anymore, it may be destroyed: ``` {.sourceCode .none} qry = ~qry Query objects should be destroyed explicitly if not needed any longer.","title":"Opening an SQLite Database"},{"location":"lua/#executing-a-query","text":"row = qry() while (row) do print(row[0], ' -> ', row[1]) row = qry() end Or with a prepared statement: qry('SGV_1960_00315', 'This is an image of a steam engine...') The second way is used for prepared queries that contain parameters.","title":"Executing a Query"},{"location":"running/","text":"Running Sipi After following the instructions in building, you will find the executable local/bin/sipi in the source tree. It can be run either as simple command-line image converter or as a server. Running Sipi As a Command-line Image Converter Convert an image file to another format: local/bin/sipi --format [output format] --fileIn [input file] [output file] Compare two image files: local/bin/sipi --Compare file1 --Compare file2 Running Sipi As a Server local/bin/sipi --config [config file] Sipi logs its operations using syslog . Command-line Options Options: --config filename, -c filename Configuration file for web server. --file fileIn, -f fileIn input file to be converted. Usage: sipi [options] -f fileIn fileout --format Value, -F Value Output format Value can be: jpx,jpg,tif,png. --ICC Value, -I Value Convert to ICC profile. Value can be: none,sRGB,AdobeRGB,GRAY. --quality Value, -q Value Quality (compression). Value can any integer between 1 and 100 --region x,y,w,h, -r x,y,w,h Select region of interest, where x,y,w,h are integer values --Reduce Value, -R Value Reduce image size by factor Value (cannot be used together with --size and --scale) --size w,h -s w,h Resize image to given size w,h (cannot be used together with --reduce and --scale) --Scale Value, -S Value Resize image by the given percentage Value (cannot be used together with --size and --reduce) --skipmeta Value, -k Value Skip the given metadata. Value can be none,all --mirror Value, -m Value Mirror the image. Value can be: none,horizontal,vertical --rotate Value, -o Value Rotate the image. by degree Value, angle between (0:360) --salsah, -s Special flag for SALSAH internal use --Compare file1 --Compare file2 or -C file1 -C file2 Compare two files --watermark file, -w file Add a watermark to the image --serverport Value, -p Value Port of the web server --nthreads Value, -t Value Number of threads for web server --imgroot Value, -i Value Root directory containing the images for the web server --loglevel Value, -l Value Logging level Value can be: DEBUG,INFO,NOTICE,WARNING,ERR,CRIT,ALERT,EMERG --help Print usage and exit. Configuration Files Sipi's configuration file is written in Lua . You can make your own configuration file by adapting config/sipi.config.lua . Check that the port number is correct and that your operating system's firewall does not block it. Set imgroot to the directory containing the files to be served. Create the directory cache in the top-level directory of the source tree. For more information, see the comments in config/sipi.config.lua . Using Sipi with Knora If you are using Sipi with Knora , you can adapt config/sipi.knora-config.lua . HTTPS Support Sipi supports SSL/TLS encryption if the OpenSSL library is installed. You will need to install a certificate; see config/sipi.config.lua for instructions. IIIF Prefixes Sipi supports IIIF image URLs . If the configuration property prefix_as_path is set to true , the IIIF prefix portion of the URL is interpreted as a subdirectory of imgroot , and Sipi looks for the requested image file in that subdirectory. Otherwise, it looks for the file in imgroot .","title":"Running"},{"location":"running/#running-sipi","text":"After following the instructions in building, you will find the executable local/bin/sipi in the source tree. It can be run either as simple command-line image converter or as a server.","title":"Running Sipi"},{"location":"running/#running-sipi-as-a-command-line-image-converter","text":"Convert an image file to another format: local/bin/sipi --format [output format] --fileIn [input file] [output file] Compare two image files: local/bin/sipi --Compare file1 --Compare file2","title":"Running Sipi As a Command-line Image Converter"},{"location":"running/#running-sipi-as-a-server","text":"local/bin/sipi --config [config file] Sipi logs its operations using syslog .","title":"Running Sipi As a Server"},{"location":"running/#command-line-options","text":"Options: --config filename, -c filename Configuration file for web server. --file fileIn, -f fileIn input file to be converted. Usage: sipi [options] -f fileIn fileout --format Value, -F Value Output format Value can be: jpx,jpg,tif,png. --ICC Value, -I Value Convert to ICC profile. Value can be: none,sRGB,AdobeRGB,GRAY. --quality Value, -q Value Quality (compression). Value can any integer between 1 and 100 --region x,y,w,h, -r x,y,w,h Select region of interest, where x,y,w,h are integer values --Reduce Value, -R Value Reduce image size by factor Value (cannot be used together with --size and --scale) --size w,h -s w,h Resize image to given size w,h (cannot be used together with --reduce and --scale) --Scale Value, -S Value Resize image by the given percentage Value (cannot be used together with --size and --reduce) --skipmeta Value, -k Value Skip the given metadata. Value can be none,all --mirror Value, -m Value Mirror the image. Value can be: none,horizontal,vertical --rotate Value, -o Value Rotate the image. by degree Value, angle between (0:360) --salsah, -s Special flag for SALSAH internal use --Compare file1 --Compare file2 or -C file1 -C file2 Compare two files --watermark file, -w file Add a watermark to the image --serverport Value, -p Value Port of the web server --nthreads Value, -t Value Number of threads for web server --imgroot Value, -i Value Root directory containing the images for the web server --loglevel Value, -l Value Logging level Value can be: DEBUG,INFO,NOTICE,WARNING,ERR,CRIT,ALERT,EMERG --help Print usage and exit.","title":"Command-line Options"},{"location":"running/#configuration-files","text":"Sipi's configuration file is written in Lua . You can make your own configuration file by adapting config/sipi.config.lua . Check that the port number is correct and that your operating system's firewall does not block it. Set imgroot to the directory containing the files to be served. Create the directory cache in the top-level directory of the source tree. For more information, see the comments in config/sipi.config.lua .","title":"Configuration Files"},{"location":"running/#using-sipi-with-knora","text":"If you are using Sipi with Knora , you can adapt config/sipi.knora-config.lua .","title":"Using Sipi with Knora"},{"location":"running/#https-support","text":"Sipi supports SSL/TLS encryption if the OpenSSL library is installed. You will need to install a certificate; see config/sipi.config.lua for instructions.","title":"HTTPS Support"},{"location":"running/#iiif-prefixes","text":"Sipi supports IIIF image URLs . If the configuration property prefix_as_path is set to true , the IIIF prefix portion of the URL is interpreted as a subdirectory of imgroot , and Sipi looks for the requested image file in that subdirectory. Otherwise, it looks for the file in imgroot .","title":"IIIF Prefixes"},{"location":"sipi/","text":"Basic Information and Reference This section provides the basic information to use SIPI as a high performance, versatile media server implementing the IIIF standards that can be used in many different settings, from a small standalone server providing basic metadata to the deployment in a complex environment. For more information about the IIIF standard see https://iiif.io . The basic idea is that an image or rectangular region of an image can be downloaded (e.g. to the browser) with a given width and height, rotation, image quality and format. All parameters are provided with the IIIF conformant URL that has the following form: http(s)://{server}/{prefix}/{region}/{size}/{rotation}/{quality}.{format} The parts do have the following meaning: {server} : The DNS name of the server, eg. iiif.dasch.swiss . The server may include a portnumber, eg. iiif2.dasch.swiss:8080 . {prefix} : A path (that may include / 's) to organize the assets. Usually the prefix reflect the internal directory or folder hierarchy. However this can be overridden using special features of SIPI (see pre-flight-script and sipi configuration file). {region} : a region of interest that should be displayed. full indicates that the whole image is being requested. For more details see IIIF regions {size} : The size of the displayed image (part). max indicates the the \"natural\" maximal resolution should be used. For more details see IIIF size {rotations} : The image can be rotated and mirrored before being transmitted to the client. SIPI allows for arbitrary rotations. The Value 0 indicates no rotation. For more details see IIIF rotation {quality} : The quality parameter determines whether the image is delivered in color, grayscale or black and white. Valid values are: default : the \"natural\" quality of the original image color : A color representation gray : A gray value representation bitonal : A bitonal representation All quality values are supported by SIPI - {format} : The file format that should be delivered. SIPI supports the following formats, irrelevant on the format the image as in the repository of SIPI: - jpg : The image is delivered as JPEG image. Unfortunately the IIIF standard does not allow the dynamic selection of the compression ratio used in creating the JPEG. However, a server wide rate may be set in the configuration file. - tif : The image is delivered as TIFF image. - png : The image is delivered as PNG image. - pdf : The image is delivered as PDF document. Note : *If the file in the SIPI repository is a multi-page PDF, a SIPI-specific extensions allows to address single pages and deliver them as images in any format. - jpx : The image is delivered as JPEG2000 image. The SIPI Executable The SIPI executable is a statically linked program that can be started as - command line tool to perform image operations, mainly format conversions - as server deamon that provides IIIF conforming media server Using SIPI as Command Line Tool The SIPI command line mode can be used for the following tasks: Format Conversions: /path/to/sipi infile outfile [options] Print Information about File and Metadata: /path/to/sipi -x infile /path/to/sipi --query infile Compare two Images Pixelwise The images may have different formats: if the have exactely the same pixels, they are considered identical). Metadata is ignored for comparison: /path/to/sipi -C file1 file2 /path/to/sipi --compare file1 file2 General Options for the Command Line Use In command line mode, SIPI supports the following options: -h , --help : Display a short help with all options available -F <fmt> , --format <fmt> : The format of the output file. Valid are jpx , jp2 , jpg , png and pdf . -I <profile> , --icc <profile> : Convert the outfile to the given ICC color profile. Supported profiles are sRGB , AdobeRGB and GRAY . -q <num> , --quality <num> : Only used for the JPEG format. Ignored for all other formats. Its a number between 1 and 100, where 1 is equivalent to the highest compression ratio and lowest quality, 100 to the lowest compression ration and highest quality of the output image. -n <num> , --pagenum <num> : Only for input files in multi-page PDF format: sets the page that should be converted. Ignored for all other input file formats. -r <x> <y> <nx> <ny> , --region <x> <y> <nx> <ny> : Selects a region of interest that should be converted. Needs 4 integer values: left_upper_corner_X , left_upper_corner_Y , width , height . -s <iiif-size> , --size <iif-size> : The size of the resulting image. The option requires a string parameter formatted according to the size-syntax of IIIF see IIIF-Size . Not giving this parameters results in having the maximalsize (as the value \"max\" would give). -s <num> , --scale <num> : Scaling the image size by the given number (interpreted as percentage). Percentage must be given as integer value. It may be bigger than 100 to upscale an image. -R <num> , --reduce <num> : Reduce the size of the image by the given factor. Thus -R 2 would resize the image to half of the original size. Using --reduce is usually much faster than using --scale , e.g. --reduce 2 is faster than --scale 50 . -m <val> , --mirror <val> : Takes either horizontal or vertical as parameter to mirror the image appropriately. -o <angle> , --rotate <angle> : Rotates the image by the given angle. The angle must be a floating point (or integer) value between 0.0 and w60.0 . -k , --skipmeta : Strip all metadata from inputfile. -w <filepath> , --watermark <filepath> : Overlays a watermark to the output image. must be a single channel, gray valued TIFF. That is, the TIFF file must have the following tag values: SAMPLESPERPIXEL = 1, BITSPERSAMPLE = 8, PHOTOMETRIC = PHOTOMETRIC_MINISBLACK. JPEG2000 Specific Options Usually, the SIPI command line tool is used to create JPEG2000 images suitable for a IIIF repository. SIPI supports the following JPEG2000 specific options. For a in detail description of these options consult the kakadu documentation! --Sprofile <profile> : The following JPEG2000 profiles are supported: PROFILE0 , PROFILE1 , PROFILE2 , PART2 , CINEMA2K , CINEMA4K , BROADCAST , CINEMA2S , CINEMA4S , CINEMASS , IMF . Default: PART2 . --rates <string> : One or more bit-rates (see kdu_compress help!). A value \"-1\" may be used in place of the first bit-rate in the list to indicate that the final quality layer should include all compressed bits. --Clayers <num> :Number of quality layers. Default: 8. --Clevels <num> : Number of wavelet decomposition levels, or stages. Default: 8. --Corder <val> : Progression order. The four character identifiers have the following interpretation: L=layer; R=resolution; C=component; P=position. The first character in the identifier refers to the index which progresses most slowly, while the last refers to the index which progresses most quickly. Thus must be one of LRCP , RLCP , RPCL , PCRL , CPRL , Default: RPCL . --Stiles <string> : Tiles dimensions \"{tx,ty}\" . Default: \"{256,256}\" . --Cprecincts <string> : Precinct dimensions \"{px,py}\" (must be powers of 2). Default: \"{256,256}\" . --Cblk <string> : Nominal code-block dimensions \"{dx,dy}\" (must be powers of 2, no less than 4 and no greater than 1024, whose product may not exceed 4096). Default: \"{64,64}\" . --Cuse_sop <val> : Include SOP markers (i.e., resync markers). Default: yes. Using SIPI as IIIF Media Server In order to use SIPI as IIIF media server, some setup work has to be done. The configuration of SIPI can be done using a configuration file (that is written in LUA) and/or using environment variables, and/or command line options. The priority is as follows: configuration file parameters are overwritten by environment variables are overwritten by command line options . The SIPI server requires a few directories to be setup and listed in the configuration file. Then the SIPI server is launched as follows: /path/to/sipi --config /path/to/config-file.lua Setup of Directories Needed SIPI needs the following directories and files setup and accessible (the real names of the directories must be indicated in the configuration file). The following configuration parameters are in the sipi -table of the configuration script: imgroot=path : This is the top-directory of the media file repository. SIPI should at least have read access to it. If SIPI is used to upload and convert files, it must also have write access. The path may be given as absolute path or as relative path. Cmdline option: --imgroot Environment variable: SIPI_IMGROOT Default: ./images initscript=path/to/init.lua : SIPI needs a minmal set of LUA functions that can be adapted to the local installation. These mandatory functions are definied in a init-script (usually it can be found in the config directory where also the configuration file is located). Cmdline option: --initscript Environment variable: SIPI_INITSCRIPT Default: ./config/sipi.init.lua tmpdir=path : For the support of multipart POST SIPI requires read/write access to a directory to save temporary files. Cmdline option: --tmpdir Environment variable: SIPI_IMGROOT Default: ./tmp scriptdir=path : Path to the directory where the LUA-scripts for the routes (e.g. RESTful services) can be found. Cmdline option: --scriptdir Environment variable: SIPI_SCRIPTDIR Default: ./scripts cachedir=path : SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache directory is defined but not existing. Cmdline option: --cachedir Environment variable: SIPI_CACHEDIR Default: ./cache In addition, SIPI can act as a webserver that offers image upload and conversion as web service. In order to use this feature, a server directory has to be defined. This definition ist in the fileserver -table of the configuration file: docroot=path : Path to the document root of the SIPI web server. Cmdline option: --docroot Environment variable: SIPI_DOCROOT Default: ./server SIPI Configuration Parameters The following configuration parameters are used by the SIPI server: hostname=dns-name : The DNS name that SIPI shall show to the outside world. Cmdline option: --hostname Environment variable: SIPI_HOSTNAME Default: localhost port=portnum : Portnumber SIPI should listen on for incoming HTTP requests. Cmdline option: --serverport Environment variable: SIPI_SERVERPORT Default: 80 ssl_port=postnum : Portnumber SIPI should listen on for incoming SHTTP requests (using SSL). Cmdline option: --sslport Environment variable: SIPI_SSLPORT Default: 443 nthreads=num : Number of worker threads that SIPI allocates. SIPI is a mutlithreaded server and pre-allocates a given number of working threads that can be configured. Cmdline option: --nthreads Environment variable: SIPI_NTHREADS Default: number of hardware cores as given by std::thread::hardware_concurrency() prefix_as_path=bool : If true , the prefix is used as path within the image root directory. If false, the prefix is ignored and it is assumed that all images are directly located in the image root. Cmdline option: --pathprefix Environment variable: SIPI_PATHPREFIX Default: false ssl_certificate=path : Path to the SSL certificate. Is mandatory if SSL is to be used. Cmdline option: --sslcert Environment variable: SIPI_SSLCERTIFICATE Default: ./certificate/certificate.pem ssl_key=path : Path to the SSL key file. Is mandatory if SSL is to be used. Cmdline option: --sslkey Environment variable: SIPI_SSLKEY Default: ./certificate/key.pem jwt_secret=string : Shared secret to encode web tokens. Cmdline option: --jwtkey Environment variable: SIPI_JWTKEY Default: UP 4888, nice 4-8-4 steam engine max_post_size=amount : Maximal size a file upoad may have. The amount has the form \"XYZM\" with M indication Megabytes. Cmdline option: --maxpost Environment variable: SIPI_MAXPOSTSIZE Default: 300M jpeg_quality=num : Compression parameter when producing JPEG output. Must be a number between 1 and 100. Cmdline option: --quality Environment variable: SIPI_JPEGQUALITY Default: 60 thumb_size=string : Default size for thumbnails. Parameter must be IIIF conformant size string. Cmdline option: --thumbsize Environment variable: SIPI_THUMBSIZE Default: !128,128 loglevel=level : SIPI uses syslog as logging facility. The logging name is Sipi . It supports the following levels: \"EMERGENCY\", \"ALERT\", \"CRITICAL\", \"ERROR\", \"WARNING\", \"NOTICE\", \"INFORMATIONAL\", \"DEBUG\". Cmdline option: --loglevel Environment variable: SIPI_LOGLEVEL Default: DEBUG max_temp_file_age=num : The maximum allowed age of temporary files (in seconds) before they are deleted. Cmdline option: --maxtmpage Environment variable: SIPI_MAXTMPAGE Default: 86400 (one day) Cache Configuration SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. The cache is based on timestamps and the canonical IIIF URL. Before an image is being converted, the canonical URL is determined. If a file associated with this canonical URL is in the cache directory, the timestamp of the original file in the repository is compated to the cached file. If the cached file is newer, it will be served. If the file in the repository is newer, the cache file (which is outdated) will be deleted and replaced be the newly converted repository file (that is being sent to the client). The following configuration parameters determine the behaviour of the cache: cachedir=path : SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache directory is defined but not existing. Cmdline option: --cachedir Environment variable: SIPI_CACHEDIR Default: ./cache cachesize=amount : The maximal size of the cache. The cache will be purged if either the maximal size or maximal number of files is reached. The amount has the form \" M\" with M indication Megabytes. Cmdline option: --cachesize Environment variable: SIPI_CACHESIZE Default: 200M cache_nfiles=num : The maximal number of files to be cached. The cache will be purged if either the maximal size or maximal number of files is reached. Cmdline option: --cachenfiles Environment variable: SIPI_CACHENFILES Default: 200 cache_hysteresis=float : If the cache becomes full, the given percentage of file space is marked for reuse and purged. Cmdline option: --cachehysteresis Environment variable: SIPI_CACHEHYSTERESIS Default: 0.15 Configuration of the HTTP File Server SIPI offers HTTP file server for HTML and other files. Files with the ending .elua are HTTP-files with embeded LUA code. Everything between the ... tags is interpreted as LUA code and the output embedded in the data stream for the client. All configurations for the HTTP server are in the fileserver table: docroot=path : Path to the document root of the file server. Cmdline option: --docroot Environment variable: SSIPI_DOCROOT Default: ./server wwwroute=string : Route for the file server should respond to requests.That is, a file with the name \"dada.html\" is accessed with htp://dnsname/server/data.html , if the wwwroute is set to /server . Cmdline option: --wwwroute Environment variable: SIPI_WWWROUTE Default: /server Routing Table SIPI allows to implement RESTful interfaces or other services based on LUA-scripts which are located in the scripts directory. In order to use these LUA-scripts as endpoints, the appropriate routes have to be defined in the routes table. An entry has the following form: - method : the HTTP request. Supported are GET , POST , PUT and DELETE . - route : A URL path that may contain / 's. - script : Name of the LUA script in the script directory. Thus, the routing section of a SIPI configuration file may look as follows: routes = { { method = 'DELETE', route = '/api/cache', script = 'cache.lua' }, { method = 'GET', route = '/api/cache', script = 'cache.lua' }, { method = 'POST', route = '/api/upload', script = 'upload.lua' }, { method = 'GET', route = '/sqlite', script = 'test_sqlite.lua' } }","title":"Basic information and Reference"},{"location":"sipi/#basic-information-and-reference","text":"This section provides the basic information to use SIPI as a high performance, versatile media server implementing the IIIF standards that can be used in many different settings, from a small standalone server providing basic metadata to the deployment in a complex environment. For more information about the IIIF standard see https://iiif.io . The basic idea is that an image or rectangular region of an image can be downloaded (e.g. to the browser) with a given width and height, rotation, image quality and format. All parameters are provided with the IIIF conformant URL that has the following form: http(s)://{server}/{prefix}/{region}/{size}/{rotation}/{quality}.{format} The parts do have the following meaning: {server} : The DNS name of the server, eg. iiif.dasch.swiss . The server may include a portnumber, eg. iiif2.dasch.swiss:8080 . {prefix} : A path (that may include / 's) to organize the assets. Usually the prefix reflect the internal directory or folder hierarchy. However this can be overridden using special features of SIPI (see pre-flight-script and sipi configuration file). {region} : a region of interest that should be displayed. full indicates that the whole image is being requested. For more details see IIIF regions {size} : The size of the displayed image (part). max indicates the the \"natural\" maximal resolution should be used. For more details see IIIF size {rotations} : The image can be rotated and mirrored before being transmitted to the client. SIPI allows for arbitrary rotations. The Value 0 indicates no rotation. For more details see IIIF rotation {quality} : The quality parameter determines whether the image is delivered in color, grayscale or black and white. Valid values are: default : the \"natural\" quality of the original image color : A color representation gray : A gray value representation bitonal : A bitonal representation All quality values are supported by SIPI - {format} : The file format that should be delivered. SIPI supports the following formats, irrelevant on the format the image as in the repository of SIPI: - jpg : The image is delivered as JPEG image. Unfortunately the IIIF standard does not allow the dynamic selection of the compression ratio used in creating the JPEG. However, a server wide rate may be set in the configuration file. - tif : The image is delivered as TIFF image. - png : The image is delivered as PNG image. - pdf : The image is delivered as PDF document. Note : *If the file in the SIPI repository is a multi-page PDF, a SIPI-specific extensions allows to address single pages and deliver them as images in any format. - jpx : The image is delivered as JPEG2000 image.","title":"Basic Information and Reference"},{"location":"sipi/#the-sipi-executable","text":"The SIPI executable is a statically linked program that can be started as - command line tool to perform image operations, mainly format conversions - as server deamon that provides IIIF conforming media server","title":"The SIPI Executable"},{"location":"sipi/#using-sipi-as-command-line-tool","text":"The SIPI command line mode can be used for the following tasks:","title":"Using SIPI as Command Line Tool"},{"location":"sipi/#format-conversions","text":"/path/to/sipi infile outfile [options]","title":"Format Conversions:"},{"location":"sipi/#print-information-about-file-and-metadata","text":"/path/to/sipi -x infile /path/to/sipi --query infile","title":"Print Information about File and Metadata:"},{"location":"sipi/#compare-two-images-pixelwise","text":"The images may have different formats: if the have exactely the same pixels, they are considered identical). Metadata is ignored for comparison: /path/to/sipi -C file1 file2 /path/to/sipi --compare file1 file2","title":"Compare two Images Pixelwise"},{"location":"sipi/#general-options-for-the-command-line-use","text":"In command line mode, SIPI supports the following options: -h , --help : Display a short help with all options available -F <fmt> , --format <fmt> : The format of the output file. Valid are jpx , jp2 , jpg , png and pdf . -I <profile> , --icc <profile> : Convert the outfile to the given ICC color profile. Supported profiles are sRGB , AdobeRGB and GRAY . -q <num> , --quality <num> : Only used for the JPEG format. Ignored for all other formats. Its a number between 1 and 100, where 1 is equivalent to the highest compression ratio and lowest quality, 100 to the lowest compression ration and highest quality of the output image. -n <num> , --pagenum <num> : Only for input files in multi-page PDF format: sets the page that should be converted. Ignored for all other input file formats. -r <x> <y> <nx> <ny> , --region <x> <y> <nx> <ny> : Selects a region of interest that should be converted. Needs 4 integer values: left_upper_corner_X , left_upper_corner_Y , width , height . -s <iiif-size> , --size <iif-size> : The size of the resulting image. The option requires a string parameter formatted according to the size-syntax of IIIF see IIIF-Size . Not giving this parameters results in having the maximalsize (as the value \"max\" would give). -s <num> , --scale <num> : Scaling the image size by the given number (interpreted as percentage). Percentage must be given as integer value. It may be bigger than 100 to upscale an image. -R <num> , --reduce <num> : Reduce the size of the image by the given factor. Thus -R 2 would resize the image to half of the original size. Using --reduce is usually much faster than using --scale , e.g. --reduce 2 is faster than --scale 50 . -m <val> , --mirror <val> : Takes either horizontal or vertical as parameter to mirror the image appropriately. -o <angle> , --rotate <angle> : Rotates the image by the given angle. The angle must be a floating point (or integer) value between 0.0 and w60.0 . -k , --skipmeta : Strip all metadata from inputfile. -w <filepath> , --watermark <filepath> : Overlays a watermark to the output image. must be a single channel, gray valued TIFF. That is, the TIFF file must have the following tag values: SAMPLESPERPIXEL = 1, BITSPERSAMPLE = 8, PHOTOMETRIC = PHOTOMETRIC_MINISBLACK.","title":"General Options for the Command Line Use"},{"location":"sipi/#jpeg2000-specific-options","text":"Usually, the SIPI command line tool is used to create JPEG2000 images suitable for a IIIF repository. SIPI supports the following JPEG2000 specific options. For a in detail description of these options consult the kakadu documentation! --Sprofile <profile> : The following JPEG2000 profiles are supported: PROFILE0 , PROFILE1 , PROFILE2 , PART2 , CINEMA2K , CINEMA4K , BROADCAST , CINEMA2S , CINEMA4S , CINEMASS , IMF . Default: PART2 . --rates <string> : One or more bit-rates (see kdu_compress help!). A value \"-1\" may be used in place of the first bit-rate in the list to indicate that the final quality layer should include all compressed bits. --Clayers <num> :Number of quality layers. Default: 8. --Clevels <num> : Number of wavelet decomposition levels, or stages. Default: 8. --Corder <val> : Progression order. The four character identifiers have the following interpretation: L=layer; R=resolution; C=component; P=position. The first character in the identifier refers to the index which progresses most slowly, while the last refers to the index which progresses most quickly. Thus must be one of LRCP , RLCP , RPCL , PCRL , CPRL , Default: RPCL . --Stiles <string> : Tiles dimensions \"{tx,ty}\" . Default: \"{256,256}\" . --Cprecincts <string> : Precinct dimensions \"{px,py}\" (must be powers of 2). Default: \"{256,256}\" . --Cblk <string> : Nominal code-block dimensions \"{dx,dy}\" (must be powers of 2, no less than 4 and no greater than 1024, whose product may not exceed 4096). Default: \"{64,64}\" . --Cuse_sop <val> : Include SOP markers (i.e., resync markers). Default: yes.","title":"JPEG2000 Specific Options"},{"location":"sipi/#using-sipi-as-iiif-media-server","text":"In order to use SIPI as IIIF media server, some setup work has to be done. The configuration of SIPI can be done using a configuration file (that is written in LUA) and/or using environment variables, and/or command line options. The priority is as follows: configuration file parameters are overwritten by environment variables are overwritten by command line options . The SIPI server requires a few directories to be setup and listed in the configuration file. Then the SIPI server is launched as follows: /path/to/sipi --config /path/to/config-file.lua","title":"Using SIPI as IIIF Media Server"},{"location":"sipi/#setup-of-directories-needed","text":"SIPI needs the following directories and files setup and accessible (the real names of the directories must be indicated in the configuration file). The following configuration parameters are in the sipi -table of the configuration script: imgroot=path : This is the top-directory of the media file repository. SIPI should at least have read access to it. If SIPI is used to upload and convert files, it must also have write access. The path may be given as absolute path or as relative path. Cmdline option: --imgroot Environment variable: SIPI_IMGROOT Default: ./images initscript=path/to/init.lua : SIPI needs a minmal set of LUA functions that can be adapted to the local installation. These mandatory functions are definied in a init-script (usually it can be found in the config directory where also the configuration file is located). Cmdline option: --initscript Environment variable: SIPI_INITSCRIPT Default: ./config/sipi.init.lua tmpdir=path : For the support of multipart POST SIPI requires read/write access to a directory to save temporary files. Cmdline option: --tmpdir Environment variable: SIPI_IMGROOT Default: ./tmp scriptdir=path : Path to the directory where the LUA-scripts for the routes (e.g. RESTful services) can be found. Cmdline option: --scriptdir Environment variable: SIPI_SCRIPTDIR Default: ./scripts cachedir=path : SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache directory is defined but not existing. Cmdline option: --cachedir Environment variable: SIPI_CACHEDIR Default: ./cache In addition, SIPI can act as a webserver that offers image upload and conversion as web service. In order to use this feature, a server directory has to be defined. This definition ist in the fileserver -table of the configuration file: docroot=path : Path to the document root of the SIPI web server. Cmdline option: --docroot Environment variable: SIPI_DOCROOT Default: ./server","title":"Setup of Directories Needed"},{"location":"sipi/#sipi-configuration-parameters","text":"The following configuration parameters are used by the SIPI server: hostname=dns-name : The DNS name that SIPI shall show to the outside world. Cmdline option: --hostname Environment variable: SIPI_HOSTNAME Default: localhost port=portnum : Portnumber SIPI should listen on for incoming HTTP requests. Cmdline option: --serverport Environment variable: SIPI_SERVERPORT Default: 80 ssl_port=postnum : Portnumber SIPI should listen on for incoming SHTTP requests (using SSL). Cmdline option: --sslport Environment variable: SIPI_SSLPORT Default: 443 nthreads=num : Number of worker threads that SIPI allocates. SIPI is a mutlithreaded server and pre-allocates a given number of working threads that can be configured. Cmdline option: --nthreads Environment variable: SIPI_NTHREADS Default: number of hardware cores as given by std::thread::hardware_concurrency() prefix_as_path=bool : If true , the prefix is used as path within the image root directory. If false, the prefix is ignored and it is assumed that all images are directly located in the image root. Cmdline option: --pathprefix Environment variable: SIPI_PATHPREFIX Default: false ssl_certificate=path : Path to the SSL certificate. Is mandatory if SSL is to be used. Cmdline option: --sslcert Environment variable: SIPI_SSLCERTIFICATE Default: ./certificate/certificate.pem ssl_key=path : Path to the SSL key file. Is mandatory if SSL is to be used. Cmdline option: --sslkey Environment variable: SIPI_SSLKEY Default: ./certificate/key.pem jwt_secret=string : Shared secret to encode web tokens. Cmdline option: --jwtkey Environment variable: SIPI_JWTKEY Default: UP 4888, nice 4-8-4 steam engine max_post_size=amount : Maximal size a file upoad may have. The amount has the form \"XYZM\" with M indication Megabytes. Cmdline option: --maxpost Environment variable: SIPI_MAXPOSTSIZE Default: 300M jpeg_quality=num : Compression parameter when producing JPEG output. Must be a number between 1 and 100. Cmdline option: --quality Environment variable: SIPI_JPEGQUALITY Default: 60 thumb_size=string : Default size for thumbnails. Parameter must be IIIF conformant size string. Cmdline option: --thumbsize Environment variable: SIPI_THUMBSIZE Default: !128,128 loglevel=level : SIPI uses syslog as logging facility. The logging name is Sipi . It supports the following levels: \"EMERGENCY\", \"ALERT\", \"CRITICAL\", \"ERROR\", \"WARNING\", \"NOTICE\", \"INFORMATIONAL\", \"DEBUG\". Cmdline option: --loglevel Environment variable: SIPI_LOGLEVEL Default: DEBUG max_temp_file_age=num : The maximum allowed age of temporary files (in seconds) before they are deleted. Cmdline option: --maxtmpage Environment variable: SIPI_MAXTMPAGE Default: 86400 (one day)","title":"SIPI Configuration Parameters"},{"location":"sipi/#cache-configuration","text":"SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. The cache is based on timestamps and the canonical IIIF URL. Before an image is being converted, the canonical URL is determined. If a file associated with this canonical URL is in the cache directory, the timestamp of the original file in the repository is compated to the cached file. If the cached file is newer, it will be served. If the file in the repository is newer, the cache file (which is outdated) will be deleted and replaced be the newly converted repository file (that is being sent to the client). The following configuration parameters determine the behaviour of the cache: cachedir=path : SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache directory is defined but not existing. Cmdline option: --cachedir Environment variable: SIPI_CACHEDIR Default: ./cache cachesize=amount : The maximal size of the cache. The cache will be purged if either the maximal size or maximal number of files is reached. The amount has the form \" M\" with M indication Megabytes. Cmdline option: --cachesize Environment variable: SIPI_CACHESIZE Default: 200M cache_nfiles=num : The maximal number of files to be cached. The cache will be purged if either the maximal size or maximal number of files is reached. Cmdline option: --cachenfiles Environment variable: SIPI_CACHENFILES Default: 200 cache_hysteresis=float : If the cache becomes full, the given percentage of file space is marked for reuse and purged. Cmdline option: --cachehysteresis Environment variable: SIPI_CACHEHYSTERESIS Default: 0.15","title":"Cache Configuration"},{"location":"sipi/#configuration-of-the-http-file-server","text":"SIPI offers HTTP file server for HTML and other files. Files with the ending .elua are HTTP-files with embeded LUA code. Everything between the ... tags is interpreted as LUA code and the output embedded in the data stream for the client. All configurations for the HTTP server are in the fileserver table: docroot=path : Path to the document root of the file server. Cmdline option: --docroot Environment variable: SSIPI_DOCROOT Default: ./server wwwroute=string : Route for the file server should respond to requests.That is, a file with the name \"dada.html\" is accessed with htp://dnsname/server/data.html , if the wwwroute is set to /server . Cmdline option: --wwwroute Environment variable: SIPI_WWWROUTE Default: /server","title":"Configuration of the HTTP File Server"},{"location":"sipi/#routing-table","text":"SIPI allows to implement RESTful interfaces or other services based on LUA-scripts which are located in the scripts directory. In order to use these LUA-scripts as endpoints, the appropriate routes have to be defined in the routes table. An entry has the following form: - method : the HTTP request. Supported are GET , POST , PUT and DELETE . - route : A URL path that may contain / 's. - script : Name of the LUA script in the script directory. Thus, the routing section of a SIPI configuration file may look as follows: routes = { { method = 'DELETE', route = '/api/cache', script = 'cache.lua' }, { method = 'GET', route = '/api/cache', script = 'cache.lua' }, { method = 'POST', route = '/api/upload', script = 'upload.lua' }, { method = 'GET', route = '/sqlite', script = 'test_sqlite.lua' } }","title":"Routing Table"},{"location":"0-release-notes/","text":"v1.x.x Release Notes v1.2.0 Release Notes See the release120 on Github. New features: Bugfixes: v1.3.0 Release Notes See the release130 on Github. New features: Added latest kakadu version v7_A_4-01727L.zip support for CIELab for both 8- and 16-bit images try/catch for ICC profiles that are not supported by kakadu. These profiles are added to the \"essential metadata\" in order to be reinstated if the JPX is converted back to a TIFF or JPEG. added more unit tests Bugfixes: 16 Bit PNG images are now teated correctly by byteswapping of the data (htons), since PNG uses network byte order which is usually noit zthe host byte order on intel processors alpha channels are treated correctly with JPEG2000 The parameter names in a multidata/form-data POST request now have the double quotes removed v1.4.0 Release Notes See the release140 on Github. New features: Added latest kakadu version v7_A_4-01727L.zip support for CIELab for both 8- and 16-bit images try/catch for ICC profiles that are not supported by kakadu. These profiles are added to the \"essential metadata\" in order to be reinstated if the JPX is converted back to a TIFF or JPEG. added more unit tests Bugfixes: 16 Bit PNG images are now teated correctly by byteswapping of the data (htons), since PNG uses network byte order which is usually noit zthe host byte order on intel processors alpha channels are treated correctly with JPEG2000 The parameter names in a multidata/form-data POST request now have the double quotes removed v1.5.0-SNAPSHOT Release Notes (not released yet) See the release150 on Github. New features: Add path for getting original filename and mimetype Add More functions for lua Add Lua clean_tempdir() function for cleaning up old temporary files. Add server.fs.readdir C++ function for Lua. Add config setting for maximum temp file age. Remove unimplemented log levels TRACE and OFF from docs and configs. Add e2e test of clean_tempdir(). Use clearer names in knora.json response. Log all internal server errors in send_error. Add more features for Knora integration Improve server.post doc. Add some improvements Don't process a payload in an HTTP DELETE request. See https://tools.ietf.org/html/rfc7231#section-4.3.5 : \"A payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request.\" Improve SipiImage.new documentation. Update Kakadu to version v7_A_5-01382N Bugfixes: Fix unittest Fix to support Essential metadata Fix incorrect log level names in Lua scripts. Fix inconsistencies in log level names (use syslog's names everywhere). Fix documentation syntax.","title":"Release-Notes"},{"location":"0-release-notes/#v1xx-release-notes","text":"","title":"v1.x.x Release Notes"},{"location":"0-release-notes/#v120-release-notes","text":"See the release120 on Github.","title":"v1.2.0 Release Notes"},{"location":"0-release-notes/#new-features","text":"","title":"New features:"},{"location":"0-release-notes/#bugfixes","text":"","title":"Bugfixes:"},{"location":"0-release-notes/#v130-release-notes","text":"See the release130 on Github.","title":"v1.3.0 Release Notes"},{"location":"0-release-notes/#new-features_1","text":"Added latest kakadu version v7_A_4-01727L.zip support for CIELab for both 8- and 16-bit images try/catch for ICC profiles that are not supported by kakadu. These profiles are added to the \"essential metadata\" in order to be reinstated if the JPX is converted back to a TIFF or JPEG. added more unit tests","title":"New features:"},{"location":"0-release-notes/#bugfixes_1","text":"16 Bit PNG images are now teated correctly by byteswapping of the data (htons), since PNG uses network byte order which is usually noit zthe host byte order on intel processors alpha channels are treated correctly with JPEG2000 The parameter names in a multidata/form-data POST request now have the double quotes removed","title":"Bugfixes:"},{"location":"0-release-notes/#v140-release-notes","text":"See the release140 on Github.","title":"v1.4.0 Release Notes"},{"location":"0-release-notes/#new-features_2","text":"Added latest kakadu version v7_A_4-01727L.zip support for CIELab for both 8- and 16-bit images try/catch for ICC profiles that are not supported by kakadu. These profiles are added to the \"essential metadata\" in order to be reinstated if the JPX is converted back to a TIFF or JPEG. added more unit tests","title":"New features:"},{"location":"0-release-notes/#bugfixes_2","text":"16 Bit PNG images are now teated correctly by byteswapping of the data (htons), since PNG uses network byte order which is usually noit zthe host byte order on intel processors alpha channels are treated correctly with JPEG2000 The parameter names in a multidata/form-data POST request now have the double quotes removed","title":"Bugfixes:"},{"location":"0-release-notes/#v150-snapshot-release-notes-not-released-yet","text":"See the release150 on Github.","title":"v1.5.0-SNAPSHOT Release Notes (not released yet)"},{"location":"0-release-notes/#new-features_3","text":"Add path for getting original filename and mimetype Add More functions for lua Add Lua clean_tempdir() function for cleaning up old temporary files. Add server.fs.readdir C++ function for Lua. Add config setting for maximum temp file age. Remove unimplemented log levels TRACE and OFF from docs and configs. Add e2e test of clean_tempdir(). Use clearer names in knora.json response. Log all internal server errors in send_error. Add more features for Knora integration Improve server.post doc. Add some improvements Don't process a payload in an HTTP DELETE request. See https://tools.ietf.org/html/rfc7231#section-4.3.5 : \"A payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request.\" Improve SipiImage.new documentation. Update Kakadu to version v7_A_5-01382N","title":"New features:"},{"location":"0-release-notes/#bugfixes_3","text":"Fix unittest Fix to support Essential metadata Fix incorrect log level names in Lua scripts. Fix inconsistencies in log level names (use syslog's names everywhere). Fix documentation syntax.","title":"Bugfixes:"}]}